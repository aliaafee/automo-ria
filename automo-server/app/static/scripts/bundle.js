(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var tabbable = require('tabbable');
var xtend = require('xtend');

var activeFocusDelay;

var activeFocusTraps = (function() {
  var trapQueue = [];
  return {
    activateTrap: function(trap) {
      if (trapQueue.length > 0) {
        var activeTrap = trapQueue[trapQueue.length - 1];
        if (activeTrap !== trap) {
          activeTrap.pause();
        }
      }

      var trapIndex = trapQueue.indexOf(trap);
      if (trapIndex === -1) {
        trapQueue.push(trap);
      } else {
        // move this existing trap to the front of the queue
        trapQueue.splice(trapIndex, 1);
        trapQueue.push(trap);
      }
    },

    deactivateTrap: function(trap) {
      var trapIndex = trapQueue.indexOf(trap);
      if (trapIndex !== -1) {
        trapQueue.splice(trapIndex, 1);
      }

      if (trapQueue.length > 0) {
        trapQueue[trapQueue.length - 1].unpause();
      }
    }
  };
})();

function focusTrap(element, userOptions) {
  var doc = document;
  var container =
    typeof element === 'string' ? doc.querySelector(element) : element;

  var config = xtend(
    {
      returnFocusOnDeactivate: true,
      escapeDeactivates: true
    },
    userOptions
  );

  var state = {
    firstTabbableNode: null,
    lastTabbableNode: null,
    nodeFocusedBeforeActivation: null,
    mostRecentlyFocusedNode: null,
    active: false,
    paused: false
  };

  var trap = {
    activate: activate,
    deactivate: deactivate,
    pause: pause,
    unpause: unpause
  };

  return trap;

  function activate(activateOptions) {
    if (state.active) return;

    updateTabbableNodes();

    state.active = true;
    state.paused = false;
    state.nodeFocusedBeforeActivation = doc.activeElement;

    var onActivate =
      activateOptions && activateOptions.onActivate
        ? activateOptions.onActivate
        : config.onActivate;
    if (onActivate) {
      onActivate();
    }

    addListeners();
    return trap;
  }

  function deactivate(deactivateOptions) {
    if (!state.active) return;

    clearTimeout(activeFocusDelay);

    removeListeners();
    state.active = false;
    state.paused = false;

    activeFocusTraps.deactivateTrap(trap);

    var onDeactivate =
      deactivateOptions && deactivateOptions.onDeactivate !== undefined
        ? deactivateOptions.onDeactivate
        : config.onDeactivate;
    if (onDeactivate) {
      onDeactivate();
    }

    var returnFocus =
      deactivateOptions && deactivateOptions.returnFocus !== undefined
        ? deactivateOptions.returnFocus
        : config.returnFocusOnDeactivate;
    if (returnFocus) {
      delay(function() {
        tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));
      });
    }

    return trap;
  }

  function pause() {
    if (state.paused || !state.active) return;
    state.paused = true;
    removeListeners();
  }

  function unpause() {
    if (!state.paused || !state.active) return;
    state.paused = false;
    updateTabbableNodes();
    addListeners();
  }

  function addListeners() {
    if (!state.active) return;

    // There can be only one listening focus trap at a time
    activeFocusTraps.activateTrap(trap);

    // Delay ensures that the focused element doesn't capture the event
    // that caused the focus trap activation.
    activeFocusDelay = delay(function() {
      tryFocus(getInitialFocusNode());
    });

    doc.addEventListener('focusin', checkFocusIn, true);
    doc.addEventListener('mousedown', checkPointerDown, {
      capture: true,
      passive: false
    });
    doc.addEventListener('touchstart', checkPointerDown, {
      capture: true,
      passive: false
    });
    doc.addEventListener('click', checkClick, {
      capture: true,
      passive: false
    });
    doc.addEventListener('keydown', checkKey, {
      capture: true,
      passive: false
    });

    return trap;
  }

  function removeListeners() {
    if (!state.active) return;

    doc.removeEventListener('focusin', checkFocusIn, true);
    doc.removeEventListener('mousedown', checkPointerDown, true);
    doc.removeEventListener('touchstart', checkPointerDown, true);
    doc.removeEventListener('click', checkClick, true);
    doc.removeEventListener('keydown', checkKey, true);

    return trap;
  }

  function getNodeForOption(optionName) {
    var optionValue = config[optionName];
    var node = optionValue;
    if (!optionValue) {
      return null;
    }
    if (typeof optionValue === 'string') {
      node = doc.querySelector(optionValue);
      if (!node) {
        throw new Error('`' + optionName + '` refers to no known node');
      }
    }
    if (typeof optionValue === 'function') {
      node = optionValue();
      if (!node) {
        throw new Error('`' + optionName + '` did not return a node');
      }
    }
    return node;
  }

  function getInitialFocusNode() {
    var node;
    if (getNodeForOption('initialFocus') !== null) {
      node = getNodeForOption('initialFocus');
    } else if (container.contains(doc.activeElement)) {
      node = doc.activeElement;
    } else {
      node = state.firstTabbableNode || getNodeForOption('fallbackFocus');
    }

    if (!node) {
      throw new Error(
        'Your focus-trap needs to have at least one focusable element'
      );
    }

    return node;
  }

  function getReturnFocusNode(previousActiveElement) {
    var node = getNodeForOption('setReturnFocus');
    return node ? node : previousActiveElement;
  }

  // This needs to be done on mousedown and touchstart instead of click
  // so that it precedes the focus event.
  function checkPointerDown(e) {
    if (container.contains(e.target)) return;
    if (config.clickOutsideDeactivates) {
      deactivate({
        returnFocus: !tabbable.isFocusable(e.target)
      });
      return;
    }
    // This is needed for mobile devices.
    // (If we'll only let `click` events through,
    // then on mobile they will be blocked anyways if `touchstart` is blocked.)
    if (config.allowOutsideClick && config.allowOutsideClick(e)) {
      return;
    }
    e.preventDefault();
  }

  // In case focus escapes the trap for some strange reason, pull it back in.
  function checkFocusIn(e) {
    // In Firefox when you Tab out of an iframe the Document is briefly focused.
    if (container.contains(e.target) || e.target instanceof Document) {
      return;
    }
    e.stopImmediatePropagation();
    tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());
  }

  function checkKey(e) {
    if (config.escapeDeactivates !== false && isEscapeEvent(e)) {
      e.preventDefault();
      deactivate();
      return;
    }
    if (isTabEvent(e)) {
      checkTab(e);
      return;
    }
  }

  // Hijack Tab events on the first and last focusable nodes of the trap,
  // in order to prevent focus from escaping. If it escapes for even a
  // moment it can end up scrolling the page and causing confusion so we
  // kind of need to capture the action at the keydown phase.
  function checkTab(e) {
    updateTabbableNodes();
    if (e.shiftKey && e.target === state.firstTabbableNode) {
      e.preventDefault();
      tryFocus(state.lastTabbableNode);
      return;
    }
    if (!e.shiftKey && e.target === state.lastTabbableNode) {
      e.preventDefault();
      tryFocus(state.firstTabbableNode);
      return;
    }
  }

  function checkClick(e) {
    if (config.clickOutsideDeactivates) return;
    if (container.contains(e.target)) return;
    if (config.allowOutsideClick && config.allowOutsideClick(e)) {
      return;
    }
    e.preventDefault();
    e.stopImmediatePropagation();
  }

  function updateTabbableNodes() {
    var tabbableNodes = tabbable(container);
    state.firstTabbableNode = tabbableNodes[0] || getInitialFocusNode();
    state.lastTabbableNode =
      tabbableNodes[tabbableNodes.length - 1] || getInitialFocusNode();
  }

  function tryFocus(node) {
    if (node === doc.activeElement) return;
    if (!node || !node.focus) {
      tryFocus(getInitialFocusNode());
      return;
    }
    node.focus();
    state.mostRecentlyFocusedNode = node;
    if (isSelectableInput(node)) {
      node.select();
    }
  }
}

function isSelectableInput(node) {
  return (
    node.tagName &&
    node.tagName.toLowerCase() === 'input' &&
    typeof node.select === 'function'
  );
}

function isEscapeEvent(e) {
  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;
}

function isTabEvent(e) {
  return e.key === 'Tab' || e.keyCode === 9;
}

function delay(fn) {
  return setTimeout(fn, 0);
}

module.exports = focusTrap;

},{"tabbable":3,"xtend":4}],2:[function(require,module,exports){
//! moment.js
//! version : 2.26.0
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return (
            input instanceof Array ||
            Object.prototype.toString.call(input) === '[object Array]'
        );
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return (
            input != null &&
            Object.prototype.toString.call(input) === '[object Object]'
        );
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (hasOwnProp(obj, k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return (
            typeof input === 'number' ||
            Object.prototype.toString.call(input) === '[object Number]'
        );
    }

    function isDate(input) {
        return (
            input instanceof Date ||
            Object.prototype.toString.call(input) === '[object Date]'
        );
    }

    function map(arr, fn) {
        var res = [],
            i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false,
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this),
                len = t.length >>> 0,
                i;

            for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m),
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                }),
                isNowValid =
                    !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid =
                    isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return (
            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
        );
    }

    function warn(msg) {
        if (
            hooks.suppressDeprecationWarnings === false &&
            typeof console !== 'undefined' &&
            console.warn
        ) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [],
                    arg,
                    i,
                    key;
                for (i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (key in arguments[0]) {
                            if (hasOwnProp(arguments[0], key)) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(
                    msg +
                        '\nArguments: ' +
                        Array.prototype.slice.call(args).join('') +
                        '\n' +
                        new Error().stack
                );
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source
        );
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
            ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (
            (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
            absNumber
        );
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(
                    func.apply(this, arguments),
                    token
                );
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i])
                    ? array[i].call(mom, format)
                    : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] =
            formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(
                localFormattingTokens,
                replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper
            .match(formattingTokens)
            .map(function (tok) {
                if (
                    tok === 'MMMM' ||
                    tok === 'MM' ||
                    tok === 'DD' ||
                    tok === 'dddd'
                ) {
                    return tok.slice(1);
                }
                return tok;
            })
            .join('');

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output)
            ? output(number, withoutSuffix, string, isFuture)
            : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string'
            ? aliases[units] || aliases[units.toLowerCase()]
            : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [],
            u;
        for (u in unitsObj) {
            if (hasOwnProp(unitsObj, u)) {
                units.push({ unit: u, priority: priorities[u] });
            }
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid()
            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
            : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (
                unit === 'FullYear' &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
            ) {
                value = toInt(value);
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                    value,
                    mom.month(),
                    daysInMonth(value, mom.month())
                );
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units),
                i;
            for (i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;

    regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex)
            ? regex
            : function (isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
              };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(
            s
                .replace('\\', '')
                .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
                    matched,
                    p1,
                    p2,
                    p3,
                    p4
                ) {
                    return p1 || p2 || p3 || p4;
                })
        );
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1
            ? isLeapYear(year)
                ? 29
                : 28
            : 31 - ((modMonth % 7) % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
            '_'
        ),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;

    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months)
                ? this._months
                : this._months['standalone'];
        }
        return isArray(this._months)
            ? this._months[m.month()]
            : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                      ? 'format'
                      : 'standalone'
              ][m.month()];
    }

    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
            ? this._monthsShort[m.month()]
            : this._monthsShort[
                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
              ][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                    '^' + this.months(mom, '').replace('.', '') + '$',
                    'i'
                );
                this._shortMonthsParse[i] = new RegExp(
                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                    'i'
                );
            }
            if (!strict && !this._monthsParse[i]) {
                regex =
                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'MMMM' &&
                this._longMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'MMM' &&
                this._shortMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
        }
    }

    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._monthsShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] =
            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear,
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear,
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
        input,
        week,
        config,
        token
    ) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6, // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
            ? this._weekdays
            : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                      ? 'format'
                      : 'standalone'
              ];
        return m === true
            ? shiftWeekdays(weekdays, this._week.dow)
            : m
            ? weekdays[m.day()]
            : weekdays;
    }

    function localeWeekdaysShort(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : m
            ? this._weekdaysShort[m.day()]
            : this._weekdaysShort;
    }

    function localeWeekdaysMin(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : m
            ? this._weekdaysMin[m.day()]
            : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._shortWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._minWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
            }
            if (!this._weekdaysParse[i]) {
                regex =
                    '^' +
                    this.weekdays(mom, '') +
                    '|^' +
                    this.weekdaysShort(mom, '') +
                    '|^' +
                    this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'dddd' &&
                this._fullWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'dd' &&
                this._minWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
        }
    }

    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
        }
    }

    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
            '^(' + minPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return (
            '' +
            hFormat.apply(this) +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return (
            '' +
            this.hours() +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
            );
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);

    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse,
    };

    // internal storage for locale config files
    var locales = {},
        localeFamilies = {},
        globalLocale;

    function commonPrefix(arr1, arr2) {
        var i,
            minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
            if (arr1[i] !== arr2[i]) {
                return i;
            }
        }
        return minl;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (
                    next &&
                    next.length >= j &&
                    commonPrefix(split, next) >= j - 1
                ) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null,
            aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (
            locales[name] === undefined &&
            typeof module !== 'undefined' &&
            module &&
            module.exports
        ) {
            try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
            }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn(
                        'Locale ' + key + ' not found. Did you forget to load it?'
                    );
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var locale,
                parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple(
                    'defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                );
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config,
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;

            if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
            } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                    // updateLocale is called for creating a new locale
                    // Set abbr so it will have a name (getters return
                    // undefined otherwise).
                    config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                    if (name === getSetGlobalLocale()) {
                        getSetGlobalLocale(name);
                    }
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow,
            a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                    ? MONTH
                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                    ? DATE
                    : a[HOUR] < 0 ||
                      a[HOUR] > 24 ||
                      (a[HOUR] === 24 &&
                          (a[MINUTE] !== 0 ||
                              a[SECOND] !== 0 ||
                              a[MILLISECOND] !== 0))
                    ? HOUR
                    : a[MINUTE] < 0 || a[MINUTE] > 59
                    ? MINUTE
                    : a[SECOND] < 0 || a[SECOND] > 59
                    ? SECOND
                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                    ? MILLISECOND
                    : -1;

            if (
                getParsingFlags(m)._overflowDayOfYear &&
                (overflow < YEAR || overflow > DATE)
            ) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
            ['YYYYMM', /\d{6}/, false],
            ['YYYY', /\d{4}/, false],
        ],
        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
        };

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    function extractFromRFC2822Strings(
        yearStr,
        monthStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr
    ) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10),
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s
            .replace(/\([^)]*\)|[\n\t]/g, ' ')
            .replace(/(\s\s+)/g, ' ')
            .replace(/^\s\s*/, '')
            .replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(
                    parsedInput[0],
                    parsedInput[1],
                    parsedInput[2]
                ).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
            parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7]
            );
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        if (config._strict) {
            config._isValid = false;
        } else {
            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
        }
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged and will be removed in an upcoming major release. Please refer to ' +
            'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate(),
            ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (
                config._dayOfYear > daysInYear(yearToUse) ||
                config._dayOfYear === 0
            ) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] =
                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (
            config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0
        ) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
        );
        expectedWeekday = config._useUTC
            ? config._d.getUTCDay()
            : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (
            config._w &&
            typeof config._w.d !== 'undefined' &&
            config._w.d !== expectedWeekday
        ) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(
                w.GG,
                config._a[YEAR],
                weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0,
            era;

        tokens =
            expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(
                    string.indexOf(parsedInput) + parsedInput.length
                );
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver =
            stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (
            config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0
        ) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
        );

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,
            scoreToBeat,
            i,
            currentScore,
            validFormatFound,
            bestFormatIsValid = false;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (isValid(tempConfig)) {
                validFormatFound = true;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (!bestFormatIsValid) {
                if (
                    scoreToBeat == null ||
                    currentScore < scoreToBeat ||
                    validFormatFound
                ) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) {
                        bestFormatIsValid = true;
                    }
                }
            } else {
                if (currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i),
            dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map(
            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
            function (obj) {
                return obj && parseInt(obj, 10);
            }
        );

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (
            (isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)
        ) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        ),
        prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond',
    ];

    function isDurationValid(m) {
        var key,
            unitHasDecimal = false,
            i;
        for (key in m) {
            if (
                hasOwnProp(m, key) &&
                !(
                    indexOf.call(ordering, key) !== -1 &&
                    (m[key] == null || !isNaN(m[key]))
                )
            ) {
                return false;
            }
        }

        for (i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds =
            +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
            ) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset(),
                sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return (
                sign +
                zeroFill(~~(offset / 60), 2) +
                separator +
                zeroFill(~~offset % 60, 2)
            );
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
            chunk,
            parts,
            minutes;

        if (matches === null) {
            return null;
        }

        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff =
                (isMoment(input) || isDate(input)
                    ? input.valueOf()
                    : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(
                        this,
                        createDuration(input - offset, 'm'),
                        1,
                        false
                    );
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {},
            other;

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted =
                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
            };
        } else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
                duration[key] = +input;
            } else {
                duration.milliseconds = +input;
            }
        } else if ((match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
            };
        } else if ((match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if (
            typeof duration === 'object' &&
            ('from' in duration || 'to' in duration)
        ) {
            diffRes = momentsDifference(
                createLocal(duration.from),
                createLocal(duration.to)
            );

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
            ret._isValid = input._isValid;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months =
            other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                    name,
                    'moment().' +
                        name +
                        '(period, number) is deprecated. Please use moment().' +
                        name +
                        '(number, period). ' +
                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                );
                tmp = val;
                val = period;
                period = tmp;
            }

            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');

    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return (
            isMoment(input) ||
            isDate(input) ||
            isString(input) ||
            isNumber(input) ||
            isNumberOrStringArray(input) ||
            isMomentInputObject(input) ||
            input === null ||
            input === undefined
        );
    }

    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'years',
                'year',
                'y',
                'months',
                'month',
                'M',
                'days',
                'day',
                'd',
                'dates',
                'date',
                'D',
                'hours',
                'hour',
                'h',
                'minutes',
                'minute',
                'm',
                'seconds',
                'second',
                's',
                'milliseconds',
                'millisecond',
                'ms',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
            dataTypeTest = false;
        if (arrayTest) {
            dataTypeTest =
                input.filter(function (item) {
                    return !isNumber(item) && isString(input);
                }).length === 0;
        }
        return arrayTest && dataTypeTest;
    }

    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'sameDay',
                'nextDay',
                'lastDay',
                'nextWeek',
                'lastWeek',
                'sameElse',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6
            ? 'sameElse'
            : diff < -1
            ? 'lastWeek'
            : diff < 0
            ? 'lastDay'
            : diff < 1
            ? 'sameDay'
            : diff < 2
            ? 'nextDay'
            : diff < 7
            ? 'nextWeek'
            : 'sameElse';
    }

    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse',
            output =
                formats &&
                (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);

        return this.format(
            output || this.localeData().calendar(format, this, createLocal(now))
        );
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (
            (inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')'
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
        );
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return (
                this.clone().startOf(units).valueOf() <= inputMs &&
                inputMs <= this.clone().endOf(units).valueOf()
            );
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1e3;
                break; // 1000
            case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        if (a.date() < b.date()) {
            // end-of-month calculations work correct when the start month has more
            // days than the end month.
            return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true,
            m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
                m,
                utc
                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                    .toISOString()
                    .replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(
            m,
            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
        );
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
            zone = '',
            prefix,
            year,
            datetime,
            suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                );
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                );
                break;
            case 'isoWeek':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                );
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                );
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time =
                    startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                    ) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                    ) - 1;
                break;
            case 'isoWeek':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time +=
                    MS_PER_HOUR -
                    mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    ) -
                    1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(),
        ];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds(),
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict,
        };
    }

    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);

    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
        input,
        array,
        config,
        token
    ) {
        var era = config._locale.erasParse(input, token, config._strict);
        if (era) {
            getParsingFlags(config).era = era;
        } else {
            getParsingFlags(config).invalidEra = input;
        }
    });

    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);

    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
            match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
            array[YEAR] = parseInt(input, 10);
        }
    });

    function localeEras(m, format) {
        var i,
            l,
            date,
            eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
            switch (typeof eras[i].since) {
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }

            switch (typeof eras[i].until) {
                case 'undefined':
                    eras[i].until = +Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }

    function localeErasParse(eraName, format, strict) {
        var i,
            l,
            eras = this.eras(),
            name,
            abbr,
            narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();

            if (strict) {
                switch (format) {
                    case 'N':
                    case 'NN':
                    case 'NNN':
                        if (abbr === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNN':
                        if (name === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNNN':
                        if (narrow === eraName) {
                            return eras[i];
                        }
                        break;
                }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
            }
        }
    }

    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
            return hooks(era.since).year();
        } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
        }
    }

    function getEraName() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
            }
        }

        return '';
    }

    function getEraNarrow() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
            }
        }

        return '';
    }

    function getEraAbbr() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
            }
        }

        return '';
    }

    function getEraYear() {
        var i,
            l,
            dir,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            dir = eras[i].since <= eras[i].until ? +1 : -1;

            // truncate time
            val = this.startOf('day').valueOf();

            if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
            ) {
                return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                );
            }
        }

        return this.year();
    }

    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }

    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }

    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }

    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }

    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }

    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }

    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }

    function computeErasParse() {
        var abbrPieces = [],
            namePieces = [],
            narrowPieces = [],
            mixedPieces = [],
            i,
            l,
            eras = this.eras();

        for (i = 0, l = eras.length; i < l; ++i) {
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));

            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }

        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp(
            '^(' + narrowPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
        input,
        week,
        config,
        token
    ) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
        );
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
        );
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null
            ? Math.ceil((this.month() + 1) / 3)
            : this.month((input - 1) * 3 + (this.month() % 3));
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict
            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
            : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear =
            Math.round(
                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
            ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }

    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return 'Moment<' + this.format() + '>';
        };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
        'dates accessor is deprecated. Use date instead.',
        getSetDayOfMonth
    );
    proto.months = deprecate(
        'months accessor is deprecated. Use month instead',
        getSetMonth
    );
    proto.years = deprecate(
        'years accessor is deprecated. Use year instead',
        getSetYear
    );
    proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone
    );
    proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted
    );

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;

    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale(),
            utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i,
            out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0,
            i,
            out = [];

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: +Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    toInt((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    // Side effect imports

    hooks.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        getSetGlobalLocale
    );
    hooks.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        getLocale
    );

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds,
            days = this._days,
            months = this._months,
            data = this._data,
            seconds,
            minutes,
            hours,
            years,
            monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (
            !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
            )
        ) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return (days * 4800) / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return (months * 146097) / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days,
            months,
            milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round,
        thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month/week
            w: null, // weeks to month
            M: 11, // months to year
        };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            weeks = round(duration.as('w')),
            years = round(duration.as('y')),
            a =
                (seconds <= thresholds.ss && ['s', seconds]) ||
                (seconds < thresholds.s && ['ss', seconds]) ||
                (minutes <= 1 && ['m']) ||
                (minutes < thresholds.m && ['mm', minutes]) ||
                (hours <= 1 && ['h']) ||
                (hours < thresholds.h && ['hh', hours]) ||
                (days <= 1 && ['d']) ||
                (days < thresholds.d && ['dd', days]);

        if (thresholds.w != null) {
            a =
                a ||
                (weeks <= 1 && ['w']) ||
                (weeks < thresholds.w && ['ww', weeks]);
        }
        a = a ||
            (months <= 1 && ['M']) ||
            (months < thresholds.M && ['MM', months]) ||
            (years <= 1 && ['y']) || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var withSuffix = false,
            th = thresholds,
            locale,
            output;

        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
            withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
            }
        }

        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000,
            days = abs$1(this._days),
            months = abs$1(this._months),
            minutes,
            hours,
            years,
            s,
            total = this.asSeconds(),
            totalSign,
            ymSign,
            daysSign,
            hmsSign;

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return (
            totalSign +
            'P' +
            (years ? ymSign + years + 'Y' : '') +
            (months ? ymSign + months + 'M' : '') +
            (days ? daysSign + days + 'D' : '') +
            (hours || minutes || seconds ? 'T' : '') +
            (hours ? hmsSign + hours + 'H' : '') +
            (minutes ? hmsSign + minutes + 'M' : '') +
            (seconds ? hmsSign + s + 'S' : '')
        );
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1
    );
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.26.0';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM', // <input type="month" />
    };

    return hooks;

})));

},{}],3:[function(require,module,exports){
var candidateSelectors = [
  'input',
  'select',
  'textarea',
  'a[href]',
  'button',
  '[tabindex]',
  'audio[controls]',
  'video[controls]',
  '[contenteditable]:not([contenteditable="false"])',
];
var candidateSelector = candidateSelectors.join(',');

var matches = typeof Element === 'undefined'
  ? function () {}
  : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;

function tabbable(el, options) {
  options = options || {};

  var regularTabbables = [];
  var orderedTabbables = [];

  var candidates = el.querySelectorAll(candidateSelector);

  if (options.includeContainer) {
    if (matches.call(el, candidateSelector)) {
      candidates = Array.prototype.slice.apply(candidates);
      candidates.unshift(el);
    }
  }

  var i, candidate, candidateTabindex;
  for (i = 0; i < candidates.length; i++) {
    candidate = candidates[i];

    if (!isNodeMatchingSelectorTabbable(candidate)) continue;

    candidateTabindex = getTabindex(candidate);
    if (candidateTabindex === 0) {
      regularTabbables.push(candidate);
    } else {
      orderedTabbables.push({
        documentOrder: i,
        tabIndex: candidateTabindex,
        node: candidate,
      });
    }
  }

  var tabbableNodes = orderedTabbables
    .sort(sortOrderedTabbables)
    .map(function(a) { return a.node })
    .concat(regularTabbables);

  return tabbableNodes;
}

tabbable.isTabbable = isTabbable;
tabbable.isFocusable = isFocusable;

function isNodeMatchingSelectorTabbable(node) {
  if (
    !isNodeMatchingSelectorFocusable(node)
    || isNonTabbableRadio(node)
    || getTabindex(node) < 0
  ) {
    return false;
  }
  return true;
}

function isTabbable(node) {
  if (!node) throw new Error('No node provided');
  if (matches.call(node, candidateSelector) === false) return false;
  return isNodeMatchingSelectorTabbable(node);
}

function isNodeMatchingSelectorFocusable(node) {
  if (
    node.disabled
    || isHiddenInput(node)
    || isHidden(node)
  ) {
    return false;
  }
  return true;
}

var focusableCandidateSelector = candidateSelectors.concat('iframe').join(',');
function isFocusable(node) {
  if (!node) throw new Error('No node provided');
  if (matches.call(node, focusableCandidateSelector) === false) return false;
  return isNodeMatchingSelectorFocusable(node);
}

function getTabindex(node) {
  var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);
  if (!isNaN(tabindexAttr)) return tabindexAttr;
  // Browsers do not return `tabIndex` correctly for contentEditable nodes;
  // so if they don't have a tabindex attribute specifically set, assume it's 0.
  if (isContentEditable(node)) return 0;
  return node.tabIndex;
}

function sortOrderedTabbables(a, b) {
  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
}

function isContentEditable(node) {
  return node.contentEditable === 'true';
}

function isInput(node) {
  return node.tagName === 'INPUT';
}

function isHiddenInput(node) {
  return isInput(node) && node.type === 'hidden';
}

function isRadio(node) {
  return isInput(node) && node.type === 'radio';
}

function isNonTabbableRadio(node) {
  return isRadio(node) && !isTabbableRadio(node);
}

function getCheckedRadio(nodes) {
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i].checked) {
      return nodes[i];
    }
  }
}

function isTabbableRadio(node) {
  if (!node.name) return true;
  // This won't account for the edge case where you have radio groups with the same
  // in separate forms on the same page.
  var radioSet = node.ownerDocument.querySelectorAll('input[type="radio"][name="' + node.name + '"]');
  var checked = getCheckedRadio(radioSet);
  return !checked || checked === node;
}

function isHidden(node) {
  // offsetParent being null will allow detecting cases where an element is invisible or inside an invisible element,
  // as long as the element does not use position: fixed. For them, their visibility has to be checked directly as well.
  return node.offsetParent === null || getComputedStyle(node).visibility === 'hidden';
}

module.exports = tabbable;

},{}],4:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],5:[function(require,module,exports){
const status = require("./status")
const User = require("./user")


module.exports = class Connection {
    constructor(logger) {
        this.index_url = null
        this.resource_index = {}
        this.user = null;
        this.logger = logger;
    }


    login(index_url, username, password, on_success, on_failed, on_finally) {
        this.index_url = index_url;
        this.user = new User();
        this.user.login(
            index_url,
            username,
            password,
            (resource_index) => {
                this.resource_index = resource_index;
                on_success();
                on_finally != null ? on_finally() : false;
            },
            (error) => {
                on_failed(error);
                on_finally != null ? on_finally() : false;
            }
        )
    }

    resourceFromPath(pathList) {
        var result = this.resource_index
        pathList.forEach((key) => {
            result = result[key]
        })
        return result
    }


    logout(on_success, on_failed) {
        this.user = null;
        on_success();
    }


    isLoggedIn() {
        if (this.user === null) {
            return false;
        }
        if (!(this.user.tokenValid())) {
            return false;
        }
        return true
    }


    _authenticate_and_execute(func, on_failed, on_finally) {
        if (this.user == null) {
            on_failed(new Error("User not logged in"));
            on_finally != null ? on_finally() : false;
            return;
        }
        if (!this.user.tokenValid()) {
            this.user.getToken(
                () => {
                    func()
                },
                (error) => {
                    on_failed(error)
                    on_finally != null ? on_finally() : false;
                }
            );
            return;
        }
        func()
    }


    _get(url, on_success, on_failed, on_finally, refetchTokenOnFail = true, method='GET') {
        let headers = this.user.getAuthorizationHeaders();

        fetch(url, { method: method, headers: headers })
            .then(status)
            .then(response => response.json())
            .then(data => {
                on_success(data);
                on_finally != null ? on_finally() : false;
            })
            .catch(error => {
                if (refetchTokenOnFail ? (error.status == 401) : false) {
                    this.user.getToken(
                        () => {
                            this._get(url, on_success, on_failed, on_finally, false)
                        },
                        (getTokenError) => {
                            on_failed(getTokenError);
                            on_finally != null ? on_finally() : false;
                        }
                    );
                } else {
                    on_failed(error);
                    on_finally != null ? on_finally() : false;
                }
            })
    }


    get(url, on_success, on_failed, on_finally) {
        this._authenticate_and_execute(
            () => {
                this._get(url, on_success, on_failed, on_finally)
            },
            on_failed,
            on_finally
        )
    }


    delete(url, on_success, on_failed, on_finally) {
        this._authenticate_and_execute(
            () => {
                this._get(url, on_success, on_failed, on_finally, true, 'DELETE')
            },
            on_failed,
            on_finally
        )
    }


    _get_blob(url, on_success, on_failed, on_finally, refetchTokenOnFail = true) {
        let headers = this.user.getAuthorizationHeaders();

        fetch(url, { method: 'GET', headers: headers })
            .then(status)
            .then(response => response.blob())
            .then(blob => {
                on_success(blob);
                on_finally != null ? on_finally() : false;
            })
            .catch(error => {
                if (refetchTokenOnFail ? (error.status == 401) : false) {
                    this.user.getToken(
                        () => {
                            this._get(url, on_success, on_failed, on_finally, false)
                        },
                        (getTokenError) => {
                            on_failed(getTokenError);
                            on_finally != null ? on_finally() : false;
                        }
                    );
                } else {
                    on_failed(error);
                    on_finally != null ? on_finally() : false;
                }
            })
    }


    get_blob(url, on_success, on_failed, on_finally) {
        this.logger.log_spinner(`GET ${url}...`)
        this._authenticate_and_execute(
            () => {
                this._get_blob(url, on_success, on_failed, on_finally);
            },
            on_failed,
            on_finally
        )
    }

    _post(url, post_data, on_success, on_failed, on_finally, refetchTokenOnFail = true) {
        let headers = this.user.getAuthorizationHeaders();

        headers.set('Content-Type', 'application/json');

        fetch(url, { method: 'POST', body: JSON.stringify(post_data), headers: headers })
            .then(status)
            .then(response => response.json())
            .then(data => {
                on_success(data);
                on_finally != null ? on_finally() : false;
            })
            .catch(error => {
                if (refetchTokenOnFail ? (error.status == 401) : false) {
                    this.user.getToken(
                        () => {
                            this._post(url, post_data, on_success, on_failed, on_finally, false)
                        },
                        (getTokenError) => {
                            on_failed(getTokenError);
                            on_finally != null ? on_finally() : false;
                        }
                    );
                } else {
                    on_failed(error);
                    on_finally != null ? on_finally() : false;
                }
            })
    }


    post(url, post_data, on_success, on_failed, on_finally) {
        this._authenticate_and_execute(
            () => {
                this._post(url, post_data, on_success, on_failed, on_finally);
            },
            on_failed,
            on_finally
        )
    }
}
},{"./status":31,"./user":32}],6:[function(require,module,exports){
const querystring = require('querystring');

const Dialog = require('../../controls/dialog/dialog');
const ResourceSearchBox = require('../../controls/resource-search-box');
const Button = require('../../controls/button');
const ResourceRadioList = require('../../controls/resource-radio-list');
const Form = require('../../controls/form/form');
const TextField = require('../../controls/form/text-field');
const SelectField = require('../../controls/form/select-field');


module.exports = class Icd10CoderDialog extends Dialog {
    constructor(options = {}) {
        super(options);

        this.onOk = null
        this.onCancel = null

        this.selectedCategory = null;
        this.selectedBlockCode = null;

        this.selectedModifier = null;
        this.selectedModifierExtra = null;

        this.searchBox = new ResourceSearchBox(
            (item) => {
                return item.code;
            },
            (item) => {
                return `${item.code} ${item.preferred_plain}`;
            },
            (item) => {
                this._onSelectSearchResult(item);
            },
            {
                placeholder: 'Search ICD-10 Code',
                popupHeight: '40%',
                cache: true
            }
        )

        this.btnOk = new Button(
            options.okLabel != null ? options.okLabel : 'Add',
            (ev) => {
                this.onOk(this.value())
                this.hide()
            },
            {
                width: '80px'
            }
        );

        this.categoryList = new ResourceRadioList(
            (category) => {
                return category.code;
            },
            (category) => {
                return this._getCategoryLabel(category);
            },
            (category) => {
                this._onSelectCategory(category);
            },
            {
                cache: true,
                onLink: (ev) => {
                    ev.preventDefault();
                    var query = ev.target.getAttribute('href');
                    var query_data = querystring.decode(query)
                    let code = query_data['category?code']
                    if (code != null) {
                        this.setSelectedCategoryFromCode(code, () => {});
                    }
                }
            }
        )

        this.form = new Form(
            {
                labelTop: true
            }
        );

        this.form.addField(new SelectField(
            'icd10modifier_class',
            (modifierClass) => {
                return modifierClass.code;
            },
            (modifierClass) => {
                return `${modifierClass.code_short} - ${modifierClass.preferred}`;
            },
            {
                label: 'Modifier'
            }
        ));

        this.form.addField(new SelectField(
            'icd10modifier_extra_class',
            (modifierClass) => {
                return modifierClass.code;
            },
            (modifierClass) => {
                return `${modifierClass.code_short} - ${modifierClass.preferred}`;
            },
            {
                label: 'Modifier Extra'
            }
        ));


        this.form.addField(new TextField(
            'comment',
            {
                label: "Comment",
                type: 'textarea',
                grow: true,
                maxGrow: 100
            }
        ));
    }

    show(onOk, onCancel) {
        this.onOk = onOk
        this.onCancel = onCancel

        this.searchBox.setResourceUrl(connection.resource_index.icd10.categories)
        
        this.selectedCategory = null;
        this.selectedBlockCode = null;

        this.selectedModifier = null;
        this.selectedModifierExtra = null;

        super.show(onCancel);
    }

    hide() {
        super.hide();
    }

    value() {
        var result = this.form.value();
        result['icd10class'] = this.selectedCategory;
        return result;
    }

    getCategory(code, onDone) {
        var url = connection.resource_index.icd10.categories + code

        connection.get(
            url,
            data => {
                onDone(data);
            },
            (error) => {
                console.log("Not Found");
                onDone({});
            },
            () => {
                ;
            }
        )
    }

    loadSelectedBlock(onDone) {
        var url = connection.resource_index.icd10.categories + '?' + querystring.stringify(
            {
                block: this.selectedBlockCode,
                detailed: true,
                per_page: 100
            }
        )

        this.categoryList.setResourceUrl(url, onDone);
    }

    setSelectedCategoryFromCode(code, onDone) {
        this.getCategory(code, (category) => {
            this.setSelectedCategory(category, onDone);
        })
    }

    setSelectedCategory(category, onDone) {
        if (category == null) {
            onDone();
            return;
        }
        this.selectedCategory = category;
        this._loadModifiers();

        if (this.selectedBlockCode != null) {
            if (this.selectedBlockCode == this.selectedCategory.parent_block_code) {
                this.categoryList.setSelection(this.selectedCategory.code);
                this.selectedCategory = this.categoryList.value()
                onDone();
                return
            }
        }

        this.selectedBlockCode = this.selectedCategory.parent_block_code;

        this.loadSelectedBlock(() => {
            requestAnimationFrame(() => {
                //Extra time needed to allow the DOM to update before we can scroll to it
                this.categoryList.setSelection(this.selectedCategory.code);
                this.selectedCategory = this.categoryList.value()
                onDone()
            }) 
        })
    }

    _loadModifier(modifier, selectedModifier, modifierField) {
        if (modifier == null) {
            modifierField.clear();
            modifierField.hide();
            return;
        }

        if (selectedModifier != null) {
            if (modifier.code == selectedModifier.code) {
                return;
            }
        }

        modifierField.setLabel(modifier.name);

        var url = connection.resource_index.icd10.modifierclasses + '?' + querystring.stringify(
            {
                'modifier_code' : modifier.code
            }
        )

        connection.get(
            url,
            data => {
                modifierField.setData(data.items)
                modifierField.show();
            },
            (error) => {
                modifierField.hide();
            },
            () => {
                ;
            }
        )
    }

    _loadModifiers() {
        this._loadModifier(
            this.selectedCategory.modifier,
            this.selectedModifier,
            this.form.getFieldByName('icd10modifier_class'),
        );
        this.selectedModifier = this.selectedCategory.modifier;

        this._loadModifier(
            this.selectedCategory.modifier_extra,
            this.selectedModifierExtra,
            this.form.getFieldByName('icd10modifier_extra_class')
        );
        this.selectedModifierExtra = this.selectedCategory.modifier_extra;
    }

    _onSelectSearchResult(item) {
        this.setSelectedCategory(item, () => { });
    }

    _onSelectCategory(category) {
        this.selectedCategory = category;
        this._loadModifiers();
    }

    _getCategoryLabel(category) {
        var lusion = ""
        if (category.inclusion != null) {
            lusion += `
                <div class="lusion d-flex">
                    <div >${category.inclusion}</div>
                </div>`
        }
        if (category.exclusion != null) {
            lusion += `
                <div class="lusion d-flex">
                    <div class="label">Excl.:</div>
                    <div>${category.exclusion}</div>
                </div>`
        }
        if (category.note != null) {
            lusion += `
                <div class="lusion d-flex">
                    <div class="label">Note:</div>
                    <div>${category.note}</div>
                </div>`
        }
        var preferred_long = ""
        if (category.preferred_long != null) {
            preferred_long = `<div class="preferred-long">(${category.preferred_long})</div>`
        }
        return `
            <div class="category-label">
                <div class="code" code="${category.code}">
                    ${category.code}
                </div>
                <div class="text">
                    <div class="preferred">
                        ${category.preferred}
                    </div>
                    ${preferred_long}
                    <div class="lusions">${lusion}</div>
                </div>
            </div>
        `
    }

    createElement() {
        super.createElement();

        //this.element.classList.add('icd10coder');
        this.element.id = 'icd10coder';

        this.headerElement.appendChild(this.searchBox.createElement());
        //this.searchBox.element.style.flexGrow = 1;

        this.bodyElement.appendChild(this.categoryList.createElement());
        this.categoryList.element.classList.add('category-list');

        this.bodyElement.appendChild(this.form.createElement());
        this.form.element.classList.add('form');
        //this.form.element.style.width = '200px';
        //this.form.element.style.minWidth = '200px';

        this.form.hideField('icd10modifier_class');
        this.form.hideField('icd10modifier_extra_class');

        this.footerElement.appendChild(this.btnOk.createElement());

        return this.element;
    }
}
},{"../../controls/button":34,"../../controls/dialog/dialog":38,"../../controls/form/form":46,"../../controls/form/select-field":47,"../../controls/form/text-field":48,"../../controls/resource-radio-list":54,"../../controls/resource-search-box":55,"querystring":68}],7:[function(require,module,exports){
const Form = require('../../controls/form/form');
const TextField = require('../../controls/form/text-field');
const FormDialog = require('../../controls/dialog/form-dialog');
const Spinner = require('../../controls/spinner');


module.exports = class LoginDialog extends FormDialog {
    constructor(options={}) {
        var form = new Form();

        /*
        form.addField(new TextField(
            'index_url',
            {
                placeholder: 'Server URL',
                required: true
            }
        ));
        */
        
        form.addField(new TextField(
            'username',
            {
                placeholder: 'Username',
                required: true
            }
        ));
        
        form.addField(new TextField(
            'password',
            {
                placeholder: 'Password',
                type: 'password',
                required: true
            }
        ));

        super(
            form, 
            {
                title: 'Login',
                okLabel: 'Login',
                //width: '400px',
                centered: true
            }
        );

        this.spinner = new Spinner();

        this.statusElement = null;
    }


    _onOk(ev) {
        if (this.form.validate() == false) {
            return;
        }
        this.onOk(this.value());
    }


    tryLogin(onSuccess, onCancel) {
        this.show(
            (data) => {
                this.spinner.show();
                connection.login(
                    '/api/', data.username, data.password,
                    () => {
                        this.hide();
                        onSuccess();
                    },
                    (error) => {
                        this.statusElement.innerText = error.message;
                        this.form._fields[1].focus();
                    },
                    () => {
                        this.spinner.hideSoft();
                    }
                )
            },
            () => {
                onCancel();
            }
        )
    }


    createElement() {
        super.createElement();

        this.element.id = 'login-dialog';

        this.bodyElement.className = 'dialog-body'

        this.bodyElement.prepend(this.spinner.createElement());
        this.spinner.hideSoft();

        this.statusElement = document.createElement('div');
        this.statusElement.className = 'dialog-status';
        this.bodyElement.appendChild(this.statusElement);

        this.btnCancel.hide();
        this._closeElement.style.display = 'none';

        return this.element;
    }
}
},{"../../controls/dialog/form-dialog":39,"../../controls/form/form":46,"../../controls/form/text-field":48,"../../controls/spinner":58}],8:[function(require,module,exports){
const FormDialog = require('../../controls/dialog/form-dialog');
const UserForm = require('../form/user-form');
const StatusDialog = require("../../controls/dialog/status-dialog")


module.exports = class UserDialog extends FormDialog {
    constructor(options={}) {
        super(
            new UserForm(), 
            {
                title: 'User',
                okLabel: 'Save',
            }
        );
    }

    _onSave(afterSave) {
        var statusDialog = new StatusDialog()

        statusDialog.show(
            'Saving...',
            'Please Wait.',
            false
        )

        var form_data = this.value()

        var data = {
            'current_password': form_data['current_password'],
            'password': form_data['password']
        }

        connection.post(
            connection.user.url,
            data,
            (response) => {
                if (response.error) {
                    statusDialog.setTitle("Failed")
                    statusDialog.setMessage($response.error)
                    statusDialog.showDismiss()
                    return
                }

                statusDialog.setTitle("Success")
                statusDialog.setMessage(
                    `Successfully saved changes.`
                )
                statusDialog.showDismiss(
                    () => {
                        this.hide()
                        afterSave(data)
                    }
                )
            },
            (error) => {
                statusDialog.setTitle("Failed")
                statusDialog.showDismiss()
                if (error.status == 401) {
                    statusDialog.setMessage("Current Password is not valid.")
                    return
                }
                statusDialog.setMessage(
                    `An error occured while saving ${error}.`
                )
            }
        )
    }
    
    show(afterSave, onCancel) {
        super.show(
            () => {
                this._onSave(afterSave)
            }, 
            onCancel
        )

        var username = this.form.getFieldByName('username')
        username.setValue(connection.user.username)
        username.lock()

        var fullname = this.form.getFieldByName('fullname')
        fullname.setValue(connection.user.getName())
        fullname.lock()

        this.setTitle(
            `User - ${connection.user.getName()} (${connection.user.username})`
        )
    }
}

},{"../../controls/dialog/form-dialog":39,"../../controls/dialog/status-dialog":40,"../form/user-form":22}],9:[function(require,module,exports){
const TextField = require("../../controls/form/text-field")
const FormField = require("../../controls/form/form-field")

module.exports = class AddressField extends FormField {
    constructor(name, options={}) {
        super(name, options);

        this.form.addField(
            new TextField(
                'line_1',
                {
                    placeholder: 'Line 1'
                }
            )
        )

        this.form.addField(
            new TextField(
                'line_2',
                {
                    placeholder: 'Line 2'
                }
            )
        )

        this.form.addField(
            new TextField(
                'line_3',
                {
                    placeholder: 'Line 3'
                }
            )
        )

        this.form.addField(
            new TextField(
                'city',
                {
                    placeholder: 'City',
                    required: true
                }
            )
        )

        this.form.addField(
            new TextField(
                'region',
                {
                    placeholder: 'Region'
                }
            )
        )

        this.form.addField(
            new TextField(
                'country',
                {
                    placeholder: 'Country',
                    required: true
                }
            )
        )

        this.form.addField(
            new TextField(
                'phone_no',
                {
                    placeholder: 'Phone Number'
                }
            )
        )
    }
}
},{"../../controls/form/form-field":45,"../../controls/form/text-field":48}],10:[function(require,module,exports){
const Form = require('../../controls/form/form')
const DateTimeField = require('../../controls/form/date-time-field')
const BedField = require("../form/bed-field")
const DoctorField = require("../form/doctor-field")


module.exports = class AdmissionDetailsForm extends Form {
    constructor(options = {}) {
        options.labelTop = true
        super(options)

        this.addField(new DoctorField(
            'personnel',
            {
                label: 'Admitting Consultant',
                required: true
            }
        ))

        this.addField(new BedField(
            'discharged_bed',
            {
                label: 'Bed',
                required: true,
                labelTop: true,
            }
        ))

        this.addField(new DateTimeField(
            'start_time',
            {
                label: 'Time of Admission',
                required: true,
                labelTop: true,
                narrow: true
            }
        ))

        this.addField(new DateTimeField(
            'end_time',
            {
                label: 'Time of Discharge',
                required: true,
                labelTop: true,
                narrow: true
            }
        ))
    }
}
},{"../../controls/form/date-time-field":42,"../../controls/form/form":46,"../form/bed-field":12,"../form/doctor-field":15}],11:[function(require,module,exports){
const Form = require('../../controls/form/form')
const TextField = require('../../controls/form/text-field')
const VitalSignsField = require("../form/vitalsigns-field")


module.exports = class AdmissionNotesForm extends Form {
    constructor(options = {}) {
        options.labelTop = true
        super(options)

        this.addField(new TextField(
            'chief_complaints',
            {
                label: 'Chief Complaints',
                type: 'textarea',
                required: true,
                labelTop: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'history',
            {
                label: 'History',
                type: 'textarea',
                require: true,
                labelTop: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'past_history',
            {
                label: 'Past History',
                type: 'textarea',
                labelTop: true,
                grow: true
            }
        ))

        this.addField(new VitalSignsField(
            'initial_vitalsigns',
            {
                label: 'Vital Signs',
                type: 'textarea',
                labelTop: true,
                grow: true
            }
        ))
        
        this.addField(new TextField(
            'general_inspection',
            {
                label: 'General Inspection',
                type: 'textarea',
                labelTop: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'exam_mse',
            {
                label: 'Mental State Examination',
                type: 'textarea',
                labelTop: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'exam_head',
            {
                label: 'Head',
                type: 'textarea',
                labelTop: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'exam_neck',
            {
                label: 'Neck',
                type: 'textarea',
                labelTop: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'exam_chest',
            {
                label: 'Chest',
                type: 'textarea',
                labelTop: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'exam_abdomen',
            {
                label: 'Abdomen',
                type: 'textarea',
                labelTop: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'exam_genitalia',
            {
                label: 'Genitalia',
                type: 'textarea',
                labelTop: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'exam_pelvic_rectal',
            {
                label: 'Pelvin & Rectal',
                type: 'textarea',
                labelTop: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'exam_extremities',
            {
                label: 'Extremities',
                type: 'textarea',
                labelTop: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'exam_other',
            {
                label: 'Others',
                type: 'textarea',
                labelTop: true,
                grow: true
            }
        ))
    }
}
},{"../../controls/form/form":46,"../../controls/form/text-field":48,"../form/vitalsigns-field":23}],12:[function(require,module,exports){
const Field = require("../../controls/form/field")
const ResourceSearchBox = require("../../controls/resource-search-box")


module.exports = class BedField extends Field {
    constructor(name, options={}) {
        super(name, options);

        //this._value = null;
        this._value = null

        this._bedSearchBox = new ResourceSearchBox(
            (item) => {
                return item.id
            },
            (item) => {
                return `Bed ${item.number}`
            },
            (item) => {
                this._value = item
            },
            {
                placeholder: 'Bed',
                displaySelected: true,
                displayNull: true,
                popupHeight: '20%'
            }
        )


        this._wardSearchBox = new ResourceSearchBox(
            (item) =>  {
                return item.id
            },
            (item) => {
                return item.name
            },
            (item) => {
                this._value = null
                this._bedSearchBox.setValue(null)
                if (item == null) {
                    this._bedSearchBox.lock()
                    return
                }
                this._bedSearchBox.unlock()
                this._bedSearchBox.setResourceUrl(item.url + "/beds/")
            },
            {
                placeholder: 'Ward',
                displaySelected: true,
                displayNull: true,
                resourceIndex: ['wards'],
                popupHeight: '20%'
            }
        )

    }

    isBlank() {
        if (this._value == null) {
            return true
        }
        return false
    }

    value() {
        return this._value;
    }

    setValue(value) {
        this._value = value;
        this._bedSearchBox.setValue(value);
        if (value == null) {
            this._wardSearchBox.setValue(null)
        } else {
            this._wardSearchBox.setValue(value.ward)
            this._bedSearchBox.setResourceUrl(value.ward.url + "/beds/")
        }
        super.setValue(value)
    }

    lock() {
        super.lock()
        this._bedSearchBox.lock()
        this._wardSearchBox.lock()
    }

    unlock() {
        super.unlock()
        this._wardSearchBox.unlock()
        if (this._wardSearchBox.value() != null) {
            this._bedSearchBox.unlock()
        }
    }

    createElement() {
        super.createElement()

        //this._displayElement = document.createElement('div');
        //this._displayElement.className = 'locked-text-box';
        //this._placeholderElement.appendChild(this._displayElement);

        this._placeholderElement.classList.add('input-group-row')
        this._placeholderElement.appendChild(this._wardSearchBox.createElement())
        this._placeholderElement.appendChild(this._bedSearchBox.createElement())

        this._bedSearchBox.lock()

        return this.element
    }
}
},{"../../controls/form/field":43,"../../controls/resource-search-box":55}],13:[function(require,module,exports){
const TextField = require("../../controls/form/text-field")


module.exports = class BPField extends TextField {
    constructor(name, options = {}) {
        super(name, options)
    }

    value() {
        var value_string = super.value()

        var parts = value_string.split('/')

        if (parts.length != 2) {
            return null
        }

        return {
            'systolic_bp': parseFloat(parts[0]),
            'diastolic_bp': parseFloat(parts[1])
        }
    }

    isValid() {
        if (!super.isValid()) {
            return false
        }

        var value_string = super.value()

        if (!value_string) {
            return true
        }

        var parts = value_string.split('/')

        if (parts.length != 2) {
            return false
        }

        if (isNaN(parseFloat(parts[0])) || isNaN(parseFloat(parts[1]))) {
            return false
        }

        return true
    }

    displayValue() {
        var value = this.value();
        if (!value) {
            return ""
        }
        return `${value.systolic_bp}/${value.diastolic_bp}`
    }

    setValue(value) {
        if (!value) {
            super.setValue(null)
            return
        }
        
        var value_str = null

        if (value.systolic_bp != null && value.diastolic_bp != null) {
            value_str = `${value.systolic_bp}/${value.diastolic_bp}`
        }

        super.setValue(value_str)
    }
}
},{"../../controls/form/text-field":48}],14:[function(require,module,exports){
const Form = require('../../controls/form/form')
const TextField = require('../../controls/form/text-field')


module.exports = class DischargeNotesForm extends Form {
    constructor(options = {}) {
        options.labelTop = true
        super(options)

        this.addField(new TextField(
            'hospital_course',
            {
                label: 'Summary of Hospital Course',
                type: 'textarea',
                required: true,
                labelTop: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'discharge_advice',
            {
                label: 'Discharge Advice',
                type: 'textarea',
                required: true,
                labelTop: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'follow_up',
            {
                label: 'Follow Up',
                type: 'textarea',
                required: true,
                labelTop: true,
                grow: true
            }
        ))
    }
}
},{"../../controls/form/form":46,"../../controls/form/text-field":48}],15:[function(require,module,exports){
const Field = require("../../controls/form/field")
const ResourceSearchBox = require("../../controls/resource-search-box")

module.exports = class DoctorField extends Field {
    constructor(name, options={}) {
        super(name, options);

        this._searchBox = new ResourceSearchBox(
            (item) => {
                return item.id
            },
            (item) => {
                return item.name
            },
            (item) => {
                this._value = item
            },
            {
                placeholder: this.options.placeholder,
                displaySelected: true,
                displayNull: true,
                resourceIndex: ['personnel','doctors'],
                popupHeight: '20%'
            }
        )
    }

    _displayData() {
        this._displayElement.innerHTML = this._value.name;
    }

    isBlank() {
        if (this.value() == null) {
            return true
        }
        return false
    }

    value() {
        super.value();
        return this._searchBox.value()
    }

    setValue(data) {
        super.setValue(data);
        this._data = data;
        this._searchBox.setValue(data);
        //this._displayData();
    }

    setResourceUrl(url) {
        this._searchBox.setResourceUrl(url)
    }

    lock() {
        super.lock()
        this._searchBox.lock()
    }

    unlock() {
        super.unlock()
        this._searchBox.unlock()
    }

    createElement() {
        super.createElement();

        //this._displayElement = document.createElement('div');
        //this._displayElement.className = 'locked-text-box';
        //this._placeholderElement.appendChild(this._displayElement);
        this._placeholderElement.appendChild(this._searchBox.createElement())


        return this.element;
    }
}
},{"../../controls/form/field":43,"../../controls/resource-search-box":55}],16:[function(require,module,exports){
const Form = require('../../controls/form/form')
const DateTimeField = require('../../controls/form/date-time-field')
const TextField = require('../../controls/form/text-field')
const FloatField = require('../../controls/form/float-field')


module.exports.encounter = class Encounter extends Form {
    constructor(options = {}) {
        options.labelTop = true
        super(options)

        this.addField(new DateTimeField(
            'start_time',
            {
                label: 'Start Time',
                labelTop: true,
                narrow: true
            }
        ))

    }
}


module.exports.investigation = class InvestigationForm extends module.exports.encounter {
    constructor(options = {}) {
        options.labelTop = true
        super(options)

        this.getFieldByName('start_time').setLabel("Report Time")
    }
}


module.exports.imaging = class ImagingForm extends module.exports.investigation {
    constructor(options={}) {
        super(options)

        this.addField(new TextField(
            'site',
            {
                label: 'Site',
                required: true,
            }
        ))

        this.addField(new TextField(
            'imaging_type',
            {
                label: 'Imaging Modality',
                required: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'report',
            {
                label: 'Report',
                type: 'textarea',
                grow: true
            }
        ))

        this.addField(new TextField(
            'impression',
            {
                label: 'Impression',
                type: 'textarea',
                required: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'radiologist',
            {
                label: 'Radiologist',
                required: true,
                grow: true
            }
        ))
    }
}


module.exports.endoscopy = class EndoscopyForm extends module.exports.investigation {
    constructor(options={}) {
        super(options)

        this.addField(new TextField(
            'site',
            {
                label: 'Site',
                required: true,
            }
        ))

        this.addField(new TextField(
            'report',
            {
                label: 'Report',
                type: 'textarea',
                grow: true
            }
        ))

        this.addField(new TextField(
            'impression',
            {
                label: 'Impression',
                type: 'textarea',
                required: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'endoscopist',
            {
                label: 'Endoscopist',
                required: true,
                grow: true
            }
        ))
    }
}


module.exports.histopathology = class HistopathologyForm extends module.exports.investigation {
    constructor(options={}) {
        super(options)

        this.addField(new TextField(
            'site',
            {
                label: 'Site',
                required: true,
            }
        ))

        this.addField(new TextField(
            'report',
            {
                label: 'Report',
                type: 'textarea',
                grow: true
            }
        ))

        this.addField(new TextField(
            'impression',
            {
                label: 'Impression',
                type: 'textarea',
                required: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'pathologist',
            {
                label: 'Pathologist',
                required: true,
                grow: true
            }
        ))
    }
}


module.exports.otherreport = class OtherReportForm extends module.exports.investigation {
    constructor(options={}) {
        super(options)

        this.addField(new TextField(
            'name',
            {
                label: 'Name of Report',
                required: true,
            }
        ))

        this.addField(new TextField(
            'report',
            {
                label: 'Report',
                type: 'textarea',
                grow: true
            }
        ))

        this.addField(new TextField(
            'impression',
            {
                label: 'Impression',
                type: 'textarea',
                required: true,
                grow: true
            }
        ))

        this.addField(new TextField(
            'reported_by',
            {
                label: 'Reported By',
                required: true,
                grow: true
            }
        ))
    }
}


module.exports.completebloodcount = class CompleteBloodCount extends module.exports.investigation {
    constructor(options={}) {
        super(options)

        this.addField(new FloatField(
            'hemoglobin',
            {
                label: 'Hemoglobin (g%)'
            }
        ))

        this.addField(new FloatField(
            'plt',
            {
                label: 'Platelate Count (10^9/L)'
            }
        ))

        this.addField(new FloatField(
            'tlc',
            {
                label: 'Total Leucocyte Count (10^9/L)'
            }
        ))
        
        this.addField(new FloatField(
            'dlc_n',
            {
                label: 'DLC Neutrophils (%)',
                narrow: true
            }
        ))

        this.addField(new FloatField(
            'dlc_l',
            {
                label: 'DLC Lymphocytes (%)',
                narrow: true
            }
        ))

        this.addField(new FloatField(
            'dlc_m',
            {
                label: 'DLC Monocytes (%)',
                narrow: true
            }
        ))

        this.addField(new FloatField(
            'dlc_e',
            {
                label: 'DLC Eiosinophils (%)',
                narrow: true
            }
        ))
    }
}


module.exports.renalfunctiontest = class RenalFunctionTest extends module.exports.investigation {
    constructor(options={}) {
        super(options)

        this.addField(new FloatField(
            'urea',
            {
                label: 'Serum Urea (mmol/L)'
            }
        ))

        this.addField(new FloatField(
            'creatinine',
            {
                label: 'Serum Creatinine (mmol/L'
            }
        ))

    }
}


module.exports.liverfunctiontest = class LiverFunctionTest extends module.exports.investigation {
    constructor(options={}) {
        super(options)

        this.addField(new FloatField(
            't_bil',
            {
                label: 'Total Billirubin (mmol/L)'
            }
        ))

        this.addField(new FloatField(
            'd_bil',
            {
                label: 'Direct Billirubin (mmol/L'
            }
        ))

        this.addField(new FloatField(
            'alt',
            {
                label: 'Alanine Amino Transferase (U/L)'
            }
        ))

        this.addField(new FloatField(
            'ast',
            {
                label: 'Aspartate Amino Transferase (U/L)'
            }
        ))

        this.addField(new FloatField(
            'alp',
            {
                label: 'Alkaline Phosphatase (U/L)'
            }
        ))
    }
}


module.exports.othertest = class OtherTest extends module.exports.investigation {
    constructor(options={}) {
        super(options)

        this.addField(new TextField(
            'name',
            {
                label: 'Name'
            }
        ))

        this.addField(new TextField(
            'value',
            {
                label: 'Value',
                narrow: true
            }
        ))

        this.addField(new TextField(
            'unit',
            {
                placeholder: 'Unit',
                narrow: true
            }
        ))
    }
}
},{"../../controls/form/date-time-field":42,"../../controls/form/float-field":44,"../../controls/form/form":46,"../../controls/form/text-field":48}],17:[function(require,module,exports){
const Form = require('../../controls/form/form')
const TextField = require('../../controls/form/text-field')
const DateField = require('../../controls/form/date-field')
const SelectField = require('../../controls/form/select-field')
const AddressField = require('../form/address-field')


module.exports = class PatientForm extends Form {
    constructor(options = {}) {
        options.labelTop = true
        super(options)
        
        this.addField(
            new TextField(
                'hospital_no',
                {
                    label: "Hospital No",
                    required: true,
                    narrow: true
                }
            )
        )

        this.addField(
            new TextField(
                'national_id_no',
                {
                    label: "National ID No",
                    required: true,
                    narrow: true
                }
            )
        )

        this.addField(
            new TextField(
                'name',
                {
                    label: "Name",
                    required: true
                }
            )
        )

        this.addField(
            new DateField(
                'time_of_birth',
                {
                    label: "Date of Birth",
                    required: true,
                    narrow: true
                }
            )
        )

        this.addField(
            new SelectField(
                'sex',
                (item) => {
                    return item.id
                },
                (item) => {
                    return item.label
                },
                {
                    label: "Sex",
                    required: true,
                    narrow: true,
                    onlyId: true,
                    data:[
                        {
                            id: 'F',
                            label: 'Female'
                        },
                        {
                            id: 'M',
                            label: 'Male'
                        }
                    ]
                }
            )
        )

        this.addField(
            new TextField(
                'allergies',
                {
                    label: "Allergies",
                    type: 'textarea',
                    labelTop: true,
                    grow: true
                }
            )
        )

        this.addField(
            new TextField(
                'phone_no',
                {
                    label: "Phone No",
                    required: false
                }
            )
        )

        this.addField(
            new AddressField(
                'permanent_address',
                {
                    label: "Permanent Address",
                    required: false,
                    narrow: true
                }
            )
        )

        this.addField(
            new AddressField(
                'current_address',
                {
                    label: "Current Address",
                    narrow: true
                }
            )
        )
    }
}
},{"../../controls/form/date-field":41,"../../controls/form/form":46,"../../controls/form/select-field":47,"../../controls/form/text-field":48,"../form/address-field":9}],18:[function(require,module,exports){
const Field = require("../../controls/form/field")
const Button = require("../../controls/button")
const TextBox = require("../../controls/text-box")
const ResourceSearchBox = require("../../controls/resource-search-box")

module.exports = class PrescriptionField extends Field {
    constructor(name, options={}) {
        super(name, options);

        this._data = [];

        this.txtDrug = new ResourceSearchBox(
            (drug) => {
                return drug.id
            },
            (drug) => {
                return drug.name
            },
            (drug) => {
                console.log(drug)
            },
            {
                resourceIndex: ['drugs'],
                displaySelected: true
            }
        )

        this.txtOrder = new TextBox()

        this.btnAdd = new Button(
            'Add',
            (event) => {
                this._data.push({
                    'drug': this.txtDrug.value(),
                    'drug_order': this.txtOrder.value(),
                    'active': true
                })
                this.txtDrug.setValue(null)
                this.txtOrder.setValue("")
                this.txtDrug.focus()
                this.displayData()
            }
        )
    }

    _clearDisplay() {
        while (this._listElement.firstChild) {
            this._listElement.firstChild.remove();
        }
    }

    _getItemLabel(item) {
        if (item.drug) {
            return `${item.drug.name} ${item.drug_order}`
        }
        if (item.drug_str) {
            return `${item.drug_str} ${item.drug_order}`
        }
        return `${item.drug_order}`
    }

    displayData() {
        this._clearDisplay();

        if (this._data == [] || this._data == null) {
            return
        }

        for (var i = 0; i < this._data.length; i++) {
            var item = this._data[i]
            var elem = document.createElement('li');
            this._listElement.appendChild(elem);

            
            elem.innerHTML = this._getItemLabel(item)

            var deleteElem = document.createElement('button')
            deleteElem.innerHTML = 'Delete'
            deleteElem.setAttribute('item-index', i)
            deleteElem.addEventListener('click', (event) => {
                this._deleteItem(
                    event.currentTarget.getAttribute('item-index')
                )
            })

            elem.appendChild(deleteElem)
        }
    }

    _deleteItem(itemIndex) {
        if (this._data == null) {
            return
        }

        console.log(itemIndex)
        console.log(this._data)
        this._date = this._data.splice(itemIndex, 1)
        console.log(this._data)

        this.displayData()
    }

    value() {
        super.value();
        return this._data;
    }

    isBlank() {
        if (this.value()) {
            return false
        }
        return true
    }

    setValue(data) {
        if (data) {
            if (data.length == 0) {
                super.setValue(null);
            } else {
                super.setValue(data)
            }
        } else {
            super.setValue(null)
        }

        this._data = data;
        this.displayData();
    }

    lock() {
        super.lock()
    }

    unlock() {
        super.unlock()
    }

    createElement() {
        super.createElement();

        this.element.classList.add('precription-field')

        this._toolbarElement = document.createElement('div')
        this._toolbarElement.className = 'toolbar'
        this._placeholderElement.appendChild(this._toolbarElement)

        this._toolbarElement.appendChild(this.txtDrug.createElement())
        this._toolbarElement.appendChild(this.txtOrder.createElement())
        this._toolbarElement.appendChild(this.btnAdd.createElement())

        this._listElement = document.createElement('ol');
        this._placeholderElement.appendChild(this._listElement);

        return this.element;
    }
}
},{"../../controls/button":34,"../../controls/form/field":43,"../../controls/resource-search-box":55,"../../controls/text-box":60}],19:[function(require,module,exports){
const Form = require('../../controls/form/form')
const PrescriptionField = require("../form/prescription-field")


module.exports = class PrescriptionForm extends Form {
    constructor(options = {}) {
        options.labelTop = true
        super(options)

        this.addField(new PrescriptionField(
            'prescription',
            {
                required: true
            }
        ))
    }
}
},{"../../controls/form/form":46,"../form/prescription-field":18}],20:[function(require,module,exports){
const Field = require("../../controls/form/field")
const Button = require("../../controls/button")

module.exports = class ProblemsField extends Field {
    constructor(name, options={}) {
        super(name, options);

        this._data = [];

        this.btnAddProblem = new Button(
            'Add',
            (event) => {
                icd10Coder.show(
                    (value) => {
                        this._data.push(value)
                        console.log(value)
                        this.displayData()
                    },
                    () => {
                        console.log('Cancelled');
                    }
                )
            }
        )
    }

    _clearDisplay() {
        while (this._listElement.firstChild) {
            this._listElement.firstChild.remove();
        }
    }

    _getProblemLabel(problem) {
        var code = ""
        var preferred_plain = ""
        var preferred_long = ""
        var modifier = ""
        var modifier_extra = ""
        var comment = ""

        if (problem.icd10class) {
            code = problem.icd10class.code
            preferred_plain = `<div class="preferred-plain">${problem.icd10class.preferred_plain}</div>`

            if (problem.icd10class.preferred_long != null) {
                preferred_long = `<div class="preferred-long">(${problem.icd10class.preferred_long})</div>`
            }
    
            
            if (problem.icd10modifier_class != null) {
                modifier = `<div class="modifier">${problem.icd10modifier_class.code_short} - ${problem.icd10modifier_class.preferred}</div>`
            }
    
            
            if (problem.icd10modifier_extra_class != null) {
                modifier_extra = `<div class="modifier-extra">${problem.icd10modifier_extra_class.code_short} - ${problem.icd10modifier_extra_class.preferred}</div>`
            }
        } else {
            code = "Uncoded"
        }
        
        if (problem.comment != null) {
            
            comment = `<div class="comment">${problem.comment}</div>`
        }

        return `
            <div class="category-label">
                <div class="code" code="${code}">
                    ${code}
                </div>
                <div class="text">
                    ${preferred_plain}
                    ${preferred_long}
                    ${modifier}
                    ${modifier_extra}
                    ${comment}
                </div>
            </div>
        `
    }

    displayData() {
        this._clearDisplay();

        if (this._data == [] || this._data == null) {
            return
        }

        for (var i = 0; i < this._data.length; i++) {
            var item = this._data[i]
            var elem = document.createElement('li');
            this._listElement.appendChild(elem);

            elem.innerHTML = this._getProblemLabel(item)

            var deleteElem = document.createElement('button')
            deleteElem.innerHTML = 'Delete'
            deleteElem.setAttribute('item-index', i)
            deleteElem.addEventListener('click', (event) => {
                this._deleteItem(
                    event.currentTarget.getAttribute('item-index')
                )
            })

            elem.appendChild(deleteElem)
        }
    }

    _deleteItem(itemIndex) {
        if (this._data == null) {
            return
        }

        console.log(itemIndex)
        console.log(this._data)
        this._date = this._data.splice(itemIndex, 1)
        console.log(this._data)

        this.displayData()
    }

    value() {
        super.value();
        return this._data;
    }

    isBlank() {
        if (this.value()) {
            return false
        }
        return true
    }

    setValue(data) {
        if (data) {
            if (data.length == 0) {
                super.setValue(null);
            } else {
                super.setValue(data)
            }
        } else {
            super.setValue(null)
        }

        this._data = data;
        this.displayData();
    }

    lock() {
        super.lock()
        this.btnAddProblem.hide()
    }

    unlock() {
        super.unlock()
        this.btnAddProblem.show()
    }

    createElement() {
        super.createElement();

        this.element.classList.add('problems-field')

        this._buttonsElement = document.createElement('div')
        this._buttonsElement.className = 'toolbar'
        this._placeholderElement.appendChild(this._buttonsElement)
        this._buttonsElement.appendChild(this.btnAddProblem.createElement())

        this._listElement = document.createElement('ol');
        this._listElement.className = 'problems-list'
        this._placeholderElement.appendChild(this._listElement);

        return this.element;
    }
}
},{"../../controls/button":34,"../../controls/form/field":43}],21:[function(require,module,exports){
const Form = require('../../controls/form/form')
const ProblemsField = require("../form/problems-field")


module.exports = class ProblemsForm extends Form {
    constructor(options = {}) {
        options.labelTop = true
        super(options)

        this._defaultStartTime = null

        this.addField(new ProblemsField(
            'problems',
            {
                required: true
            }
        ))
    }

    setValue(value) {
        if (value) {
            if (value.start_time) {
                this._defaultStartTime = value.start_time
            }
        }
        super.setValue(value)
    }

    value() {
        var value = super.value()

        value.problems.forEach((problem) => {
            if (!problem.start_time) {
                problem.start_time = this._defaultStartTime
            }
        })

        return value
    }
}
},{"../../controls/form/form":46,"../form/problems-field":20}],22:[function(require,module,exports){
const Form = require('../../controls/form/form')
const TextField = require('../../controls/form/text-field')


module.exports = class UserForm extends Form {
    constructor(options = {}) {
        options.labelTop = true
        super(options)

        this.addField(
            new TextField(
                'username',
                {
                    label: "User Name"
                }
            )
        )

        this.addField(
            new TextField(
                'fullname',
                {
                    label: "Full Name"
                }
            )
        )
        
        this.addField(
            new TextField(
                'current_password',
                {
                    label: "Current Password",
                    type: 'password',
                    required: true
                }
            )
        )

        this.addField(
            new TextField(
                'password',
                {
                    label: "New Password",
                    type: 'password',
                    required: true
                }
            )
        )
    }
}
},{"../../controls/form/form":46,"../../controls/form/text-field":48}],23:[function(require,module,exports){
const FloatField = require("../../controls/form/float-field")
const BPField = require("./bp-field")
const FormField = require("../../controls/form/form-field")

module.exports = class VitalSignsField extends FormField {
    constructor(name, options={}) {
        super(name, options);
        this.form.options.labelSize = "25%"
        
        this.form.addField(new FloatField(
            'pulse_rate',
            {
                label: 'Pulse Rate (/min)'
            }
        ))

        this.form.addField(new FloatField(
            'respiratory_rate',
            {
                label: 'Respiratory Rate (/min)'
            }
        ))

        this.form.addField(new BPField(
            'blood_pressure',
            {
                label: 'Blood Pressure (mmHg)'
            }
        ))

        this.form.addField(new FloatField(
            'temperature',
            {
                label: 'Temperature (&deg;C)'
            }
        ))
    }

    value() {    
        var value = super.value();

        if (!value) {
            return null
        }
        
        if (value['blood_pressure'] != null) {
            value['diastolic_bp'] = value['blood_pressure']['diastolic_bp']
            value['systolic_bp'] = value['blood_pressure']['systolic_bp']
        } else {
            value['diastolic_bp'] = null
            value['systolic_bp'] = null
        }
        delete(value['blood_pressure'])

        return value
    }

    setValue(value) {
        
        if (!value) {
            this.form.clear()
            return
        }

        if (value['systolic_bp'] || value['diastolic_bp']) {
            value['blood_pressure'] = {
                'systolic_bp': value['systolic_bp'],
                'diastolic_bp': value['diastolic_bp']
            }

            delete(value['systolic_bp'])
            delete(value['diastolic_bp'])
        }
        
        super.setValue(value)
    }
}
},{"../../controls/form/float-field":44,"../../controls/form/form-field":45,"./bp-field":13}],24:[function(require,module,exports){
//const feather = require('feather-icons');


module.exports = class Logger {
    constructor () {
        this.statusElement = null;
    }

    setTarget(target) {
        this.statusElement = target;
    }

    log(message) {
        if (this.statusElement == null) {
            console.log(message);
            return;
        }
        this.statusElement.innerHtml = message;
    }

    log_spinner(message) {
        if (this.statusElement == null) {
            //console.log(message);
            return;
        }
        this.statusElement.innerHtml = message;
    }

    log_success(message) {
        if (this.statusElement == null) {
            //console.log(message);
            return;
        }
        this.statusElement.innerHtml = message;
    }

    log_error(message) {
        if (this.statusElement == null) {
            console.log(message);
            return;
        }
        this.statusElement.innerHtml = message;
    }
}
},{}],25:[function(require,module,exports){
//const moment = require('moment');
const datetime = require('../../controls/datetime');

const Control = require("../../controls/control");
const Button = require('../../controls/button')
const ResourcePanel = require('../../controls/panel/resource-panel');
const CollapsePanel = require('../../controls/panel/collapse-panel')
const Spinner = require('../../controls/spinner')

const Form = require("../../controls/form/form")
const AdmissionDetailsForm = require('../form/admission-details-form')
const ProblemsForm = require('../form/problems-form')
const AdmissionNotesForm = require('../form/admission-notes-form')
const DischargeNotesForm = require('../form/discharge-notes-form')
const PrescriptionForm = require('../form/prescription-form')
const EncountersList = require('./encounters-list')

class AdmissionsList extends Control {
    constructor(options={}) {
        options.className = 'admissions-list'
        super(options)

        this.onChangeAdmissionUrl = null
        this._admission = null

        this.nextButton = new Button(
            `<span class="arrow right"></span>`,
            () => {
                this._onNext()
            },
            {
                style: 'clear'
            }
        )

        this.prevButton = new Button(
            `<span class="arrow left"></span>`,
            () => {
                this._onPrev()
            },
            {
                style: 'clear'
            }
        )

    }

    _onPrev() {
        if (!this._admission) {
            return
        }

        if (!this._admission.prev) {
            return
        }

        if (!this.onChangeAdmissionUrl) {
            return
        }

        this.onChangeAdmissionUrl(this._admission.prev)
    }

    _onNext() {
        if (!this._admission) {
            return
        }

        if (!this._admission.next) {
            return
        }

        if (!this.onChangeAdmissionUrl) {
            return
        }

        this.onChangeAdmissionUrl(this._admission.next)
    }

    setError(message) {
        this.labelElement.innerHTML = message
    }

    setAdmission(admission) {
        this._admission = admission

        if (!admission) {
            this.prevCountElement.innerHTML = ""
            this.nextCountElement.innerHTML = ""
            this.prevButton.hideSoft()
            this.nextButton.hideSoft()
            this.labelElement.innerHTML = "No Admissions"
            return
        }

        var from = ''
        if (admission.start_time) {
            //from = moment.utc(admission.start_time, 'YYYY-MM-DD').format('LL')
            from = datetime.toLocalDateFormatted(admission.start_time)
        }

        var to = 'Current'
        if (admission.end_time) {
            //to = moment.utc(admission.end_time, 'YYYY-MM-DD').format('LL')
            to = datetime.toLocalDateFormatted(admission.end_time)
        }

        this.labelElement.innerHTML = `
            <h1>Admission</h1>
            <div>${from} to ${to} </div>
            <div>${admission.personnel.complete_name}</div>
            <div>${admission.personnel.department.name}</div>
        `

        if (admission.prev) {
            this.prevButton.show()
            this.prevCountElement.innerHTML = admission.prev_count
        } else {
            this.prevButton.hideSoft()
            this.prevCountElement.innerHTML = ""
        }

        if (admission.next) {
            this.nextButton.show()
            this.nextCountElement.innerHTML = admission.next_count
        } else {
            this.nextButton.hideSoft()
            this.nextCountElement.innerHTML = ""
        }
    }

    createElement() {
        super.createElement()

        this.element.appendChild(this.prevButton.createElement())

        this.prevCountElement = document.createElement('span')
        this.prevButton.element.appendChild(this.prevCountElement)

        this.labelElement = document.createElement('div')
        this.labelElement.className = 'label'
        this.element.appendChild(this.labelElement)

        this.element.appendChild(this.nextButton.createElement())

        this.nextCountElement = document.createElement('span')
        this.nextButton.element.prepend(this.nextCountElement)

        this.prevButton.hideSoft()
        this.nextButton.hideSoft()

        return this.element
    }
}

module.exports = class AdmissionPanel extends Control {
    constructor (options={}) {
        /* options
         *    spinner = spinner object
         */
        options.id = 'admission-panel'
        super(options);

        this._admission = null;

        this.admissionList = new AdmissionsList()

        this.admissionList.onChangeAdmissionUrl = (admission_url) => {
            this.admissionList.lock()
            this.setAdmissionUrl(admission_url)
        }

        this.btnDischargeSummary = new Button(
            'Discharge Summary',
            () => {
                connection.get_blob(
                    this._admission.discharge_summary_pdf,
                    (blob) => {
                        var file = window.URL.createObjectURL(blob);
                        window.open(file);
                    },
                    () => {
                        console.log('Failed to get discharge summary')
                    }
                )
            }
        )
        
        this._panels = []

        if (this.options.spinner) {
            this.spinner = this.options.spinner
        } else {
            this.spinner = new Spinner()
        }

        this._panels.push(
            new ResourcePanel(
                new AdmissionDetailsForm(),
                (admission) => {
                    /*this.admissionList.setAdmission(admission)*/
                    this.setAdmission(admission)
                },
                {
                    title: 'Admission Details'
                }
            )
        )

        this._panels.push(
            new ResourcePanel(
                new ProblemsForm(),
                null,
                {
                    title: 'Diagnosis'
                }
            )
        )

        this._panels.push(
            new ResourcePanel(
                new AdmissionNotesForm(),
                null,
                {
                    title: 'Admission Notes'
                }
            )
        )

        this._panels.push(
            new EncountersList(
                {
                    title: 'Encounters'
                }
            )
        )

        /*
        this._panels.push(
            new CollapsePanel(
                {
                    title: 'Procedures/ Reports/ Other Notes'
                }
            )
        )
        */

        this._panels.push(
            new ResourcePanel(
                new DischargeNotesForm(),
                null,
                {
                    title: 'Discharge Notes'
                }
            )
        )

        this._panels.push(
            new ResourcePanel(
                new PrescriptionForm(),
                null,
                {
                    title: 'Discharge Prescription'
                }
            )
        )
    }

    setAdmission(admission) {
        this.admissionList.setAdmission(admission)
        this.admissionList.unlock()
        
        this.setAdmissionUrl(admission.url)
    }

    setAdmissionUrl(admission_url) {
        this.spinner.show()
        this._bodyElement.style.display = ''
        this._bodyElement.classList.add('locked')

        connection.get(
            admission_url,
            (admission) => {
                this._admission = admission

                if (this._admission.discharge_summary_pdf) {
                    this.btnDischargeSummary.unlock()
                } else {
                    this.btnDischargeSummary.lock()
                }

                this._panels.forEach((panel) => {
                    panel.setValue(admission)
                    panel.expand()
                })
                //this._bodyElement.style.display = ''
                this._bodyElement.classList.remove('locked')

                this.admissionList.setAdmission(admission)
                this.admissionList.unlock()
            },
            (error) => {
                this._bodyElement.style.display = 'none'
                this.admissionList.setAdmission(null)
                if (error.status == 404) {
                    this.admissionList.setError(`Admission Not Found`)
                    return
                }
                this.admissionList.setError(`Failed to load admissions: ${error.message}`)
            },
            () => {
                this.spinner.hideSoft()
            }
        )
    }

    setPatient(patient) {
        this.spinner.show()
        this.admissionList.lock()
        this._bodyElement.style.display = ''
        this._bodyElement.classList.add('locked')

        connection.get(
            patient.admissions,
            (admissions) => {
                if (admissions) {
                    this.setAdmission(admissions.items[0])
                } else {
                    this._bodyElement.style.display = 'none'
                    this.admissionList.setAdmission(null)
                }
            },
            (error) => {
                this._bodyElement.style.display = 'none'
                this.admissionList.setAdmission(null)
                if (error.status == 404) {
                    this.admissionList.setError(`No Admissions`)
                    return
                }
                this.admissionList.setError(`Failed to load admissions: ${error.message}`)
            },
            () => {
                this.admissionList.unlock()
                this.spinner.hideSoft()
            }
        )
    }

    createElement() {
        super.createElement();

        this.element.appendChild(this.admissionList.createElement())

        if (!this.options.spinner) {
            this.element.appendChild(this.spinner.createElement())
        }

        this._bodyElement = document.createElement('div')
        this._bodyElement.className = 'body'
        this.element.appendChild(this._bodyElement)

        this._toolbarElement = document.createElement('div')
        this._toolbarElement.className = "toolbar"
        this._bodyElement.appendChild(this._toolbarElement)

        this._toolbarElement.appendChild(this.btnDischargeSummary.createElement())

        this._panels.forEach((panel) => {
            this._bodyElement.appendChild(panel.createElement())
        })

        //this._bodyElement.style.display = 'none'
        this._bodyElement.classList.add('locked')

        return this.element
    }
}

},{"../../controls/button":34,"../../controls/control":35,"../../controls/datetime":36,"../../controls/form/form":46,"../../controls/panel/collapse-panel":50,"../../controls/panel/resource-panel":51,"../../controls/spinner":58,"../form/admission-details-form":10,"../form/admission-notes-form":11,"../form/discharge-notes-form":14,"../form/prescription-form":19,"../form/problems-form":21,"./encounters-list":27}],26:[function(require,module,exports){
const ResourcePanel = require("../../controls/panel/resource-panel")
const EncounterForms = require("../form/encounter-forms")
const Button = require("../../controls/button")
const ConfirmDialog = require("../../controls/dialog/confirm-dialog")


module.exports = class EncounterPanel extends ResourcePanel {
    constructor (onSaved, options={}) {
        var EncounterClass = EncounterForms[options.type]

        if (EncounterClass) {
            var form = new EncounterClass()
        } else {
            var form = new EncounterForms.encounter()
        }
        
        super(form, onSaved ,options);

        this.btnDelete = new Button(
            'Delete',
            () => {
                this._onDelete()
            }
        )
    }

    transient() {
        super.transient()
        this.btnDelete.hide()
    }

    lock() {
        super.lock();
        this.btnDelete.hide()
    }

    unlock() {
        super.unlock();
        this.btnDelete.show()
    }

    _delete() {
        this.spinner.show()
        this.transient()
        connection.delete(
            this._data.url,
            (response) => {
                console.log(response)
                this.lock()
                this.hide()
            },
            (error) => {
                this.statusElem.innerHTML = `Could Not Delete`
                this.unlock()
            },
            () => {
                console.log("Finally")
                this.spinner.hideSoft()
            }
        )
    }

    _onDelete() {
        console.log("Delete")

        var confirm = new ConfirmDialog()

        confirm.show(
            "Delete Encounter",
            "Are you sure you want to delete this encounter? This operation is not reversible",
            () => {
                this._delete()
            },
            () => {}
        )
    }

    createElement() {
        super.createElement()

        this.toolBarElement.insertBefore(this.btnDelete.createElement(), this.btnSave.element)

        this.btnDelete.hide()

        return this.element
    }

}
},{"../../controls/button":34,"../../controls/dialog/confirm-dialog":37,"../../controls/panel/resource-panel":51,"../form/encounter-forms":16}],27:[function(require,module,exports){
//const Button = require("../button");
const Spinner = require("../../controls/spinner");
const CollapsePanel = require("../../controls/panel/collapse-panel");
//const ResourcePanel = require("../../controls/panel/resource-panel")
const EncounterPanel = require("./encounter-panel")

module.exports = class EncountersList extends CollapsePanel {
    constructor (options={}) {
        super(options);

        this.spinner = new Spinner()

        this.encounters_data = null

        this._panels = []
    }

    setValue(value) {
        this.setEncounterListUrl(value['encounters_url'])
    }

    _clear() {
        while (this.encountersListElement.firstChild) {
            this.encountersListElement.firstChild.remove();
        }
        this._panels = []
    }

    _appendData(data) {
        if (data == null) {
            return
        }

        data.forEach((item) => {
            console.log(item.type)

            var panel = new EncounterPanel(
                () => {},
                {
                    type: item.type
                }
            )

            this.encountersListElement.appendChild(panel.createElement())

            panel.setTitle(item.label)
            panel.setValue(item)

            this._panels.push(panel)
        })
    }

    setEncounterListUrl(url) {
        this._clear()

        this.encountersUrl = url
        this.spinner.show()

        connection.get(
            this.encountersUrl,
            (response) => {
                console.log(response)
                this._appendData(response.items)
            },
            (error) => {
                if (error.status == 404) {
                    console.log("No encounters found")
                    return
                }
                console.log("Error loading encounters")
            },
            () => {
                this.spinner.hide()
            }
        )
    }

    createElement() {
        super.createElement()

        this.bodyElement.appendChild(this.spinner.createElement())

        this.encountersListElement = document.createElement('div')
        this.encountersListElement.className = 'encounters-list'
        this.bodyElement.appendChild(this.encountersListElement)

        this.spinner.hide()

        return this.element
    }
}
},{"../../controls/panel/collapse-panel":50,"../../controls/spinner":58,"./encounter-panel":26}],28:[function(require,module,exports){
const Control = require('../../controls/control');
const Button = require('../../controls/button')
const PatientBrowser = require('../panel/patient-browser');


module.exports = class MainPanel extends Control {
    constructor(onUser, onLogout, options={}) {
        super(options);

        this._menuItems = [];
        this._sidebarItems = [];

        this._main = new PatientBrowser();

        this._userButton = new Button(
            'Username',
            (event) => {
                console.log("Open User Dialog");
                onUser();
            }
        )
        this._logoutButton = new Button(
            'Logout',
            (event) => {
                console.log("Logout")
                onLogout();
            }
        )

        this.addMenuSpacer();
        this.addMenuItem(this._userButton)
        this.addMenuItem(this._logoutButton)

        this.addSidebarItem(
            new Button('P')
        )
        this.addSidebarItem(
            new Button('A', (event) => {
                admitWizard.show(
                    (admission) => {
                        console.log(admission)
                        this._main.setPatient(
                            admission.patient,
                            () => {},
                            () => {},
                            admission
                        )
                    },
                    () => {
                        console.log("Cancelled")
                    }
                )
            })
        )
        this.addSidebarItem(
            new Button('I', (event) => {
                icd10Coder.show(
                    (value) => {
                        console.log(value);
                    },
                    () => {
                        console.log('Cancelled');
                    }
                )
            })
        )
        this.addSidebarSpacer()
        this.addSidebarItem(
            new Button('S')
        )
    }

    addMenuItem(item) {
        this._menuItems.push(item);
    }

    addMenuSpacer() {
        this._menuItems.push('_spacer');
    }

    addSidebarItem(item) {
        this._sidebarItems.push(item);
    }

    
    addSidebarSpacer() {
        this._sidebarItems.push('_spacer');
    }

    _createMenuBarElement() {
        this._menuBarElement = document.createElement('div')
        this._menuBarElement.className = 'menu-bar';

        this._menuItems.forEach((item) => {
            if (item == '_spacer') {
                var elem = document.createElement('div');
                elem.className = 'menu-bar-spacer';
                this._menuBarElement.appendChild(elem);
                return;
            }
            var elem = item.createElement();
            elem.classList.add('menu-bar-item');
            this._menuBarElement.appendChild(elem)
        })

        return this._menuBarElement;
    }

    _createSideBarElement() {
        this._sideBarElement = document.createElement('div')
        this._sideBarElement.className = 'side-bar';

        this._sidebarItems.forEach((item) => {
            if (item == '_spacer') {
                var elem = document.createElement('div');
                elem.className = 'side-bar-spacer';
                this._sideBarElement.appendChild(elem);
                return;
            }
            var elem = item.createElement();
            elem.classList.add('side-bar-item');
            if (item.label == 'P') {
                elem.classList.add('selected')
            }
            this._sideBarElement.appendChild(elem)
        })

        return this._sideBarElement;
    }

    createElement() {
        super.createElement();

        this._userButton.label = connection.user.getName();

        this.element.className = 'main-panel';

        this.element.appendChild(this._createMenuBarElement())

        //this._sideBarElement = document.createElement('div')
        //this._sideBarElement.className = 'side-bar';

        var bodyElem = document.createElement('div');
        bodyElem.className = 'main-panel-body';
        //bodyElem.style.display = 'flex';
        this.element.appendChild(bodyElem);

        bodyElem.appendChild(this._createSideBarElement())

        this._mainElement = document.createElement('div')
        this._mainElement.className = 'main-content';
        //this._mainElement.style.display = 'flex';
        bodyElem.appendChild(this._mainElement)

        //this._menuBarElement.innerHTML = `<div class="menu-bar-spacer"></div><div class="menu-bar-item">Dr Ali Aafee</div><div class="menu-bar-item">Logout</div>`;
        //this._sideBarElement.innerHTML = "side";
        //this._mainElement.innerHTML = "main";
        this._mainElement.appendChild(this._main.createElement());

        return this.element;
    }
}
},{"../../controls/button":34,"../../controls/control":35,"../panel/patient-browser":29}],29:[function(require,module,exports){
//const queryString = require('query-string');
const querystring = require('querystring');

const Control = require('../../controls/control');
const TextBox = require('../../controls/text-box');
//const ListBox = require('../../controls/list-box');
const ResourceList = require('../../controls/resource-list');
const Splitter = require('../../controls/splitter');
const PatientPanel = require('./patient-panel');
const Button = require('../../controls/button')



class PatientList extends Control {
    constructor(options={}) {
        super(options);

        this.onSelectPatient = null;
        this.onSearchStarted = null;
        this.onDismissSearch = null;

        this.searchBox = new TextBox({
            placeholder: 'Search'
        });

        this.btnDismiss = new Button(
            '&times;',
            () => {
                this.searchBox.setValue("")
                this.onDismissSearch()
            }
        )

        this.resultList = new ResourceList(
            (item) => {
                return item.id;
            },
            (item) => {
                return this._getPatientLabel(item);
            },
            (item) => {
                this.onSelectPatient(item);
            },
            {
                autoLoadNext: true,
                cache: false
            }
        )
    }

    _getPatientLabel(patient) {
        return `
            <div class="patient-label">
                <div class="patient-id-number">
                    ${patient.national_id_no}
                </div>
                <div class="patient-name">
                    ${patient.name}
                </div>
                <div class="patient-age">
                    ${patient.age}
                </div>
                <div class="patient-sex">
                    ${patient.sex}
                </div>
            </div>
        `
    }

    _search() {
        if (this.onSearchStarted) {
            this.onSearchStarted();
        }
        this.resultList.setResourceUrl(
            connection.resource_index.patients + '?' + querystring.stringify(
                {
                    'q': this.searchBox.value(),
                    'per_page': 30
                }
            )
        )
    }

    lock() {
        this.resultList.lock()
    }

    unlock() {
        this.resultList.unlock();
    }

    createElement() {
        super.createElement();

        this.element.id = 'patient-list'

        var toolbarElement = document.createElement('div')
        toolbarElement.className = 'toolbar'
        this.element.appendChild(toolbarElement)

        toolbarElement.appendChild(this.searchBox.createElement());
        this.searchBox.element.setAttribute('autocomplete', 'off')

        toolbarElement.appendChild(this.btnDismiss.createElement());

        this.element.appendChild(this.resultList.createElement());
        
        this.searchBox.element.addEventListener('keyup', (ev) => {
            this._search();
        })

        this._search();

        return this.element;
    }
}


module.exports = class PatientBrowser extends Splitter {
    constructor(options={}) {
        var patientPanel = new PatientPanel();
        var patientList = new PatientList();

        options.pane1Size = '260px';
        
        options.resizable = true;

        super(
            patientList,
            patientPanel,
            options
        )

        patientList.onSelectPatient = (patient) => {
            patientList.lock();
            this.setPane2Active();
            patientPanel.setPatient(
                patient, 
                () => {
                    patientList.unlock();
                },
                () => {
                    patientList.unlock();
                }
            );
        }

        patientList.onSearchStarted = () => {
            this.setPane1Active()
        }

        patientList.onDismissSearch = () => {
            this.setPane2Active()
        }
    }

    setPatient(patient, onDone, onFailed, admission) {
        this.pane2.setPatient(patient, onDone, onFailed, admission)
    }

    createElement() {
        super.createElement()

        this.element.id = 'patient-browser'

        return this.element
    }
};
},{"../../controls/button":34,"../../controls/control":35,"../../controls/resource-list":53,"../../controls/splitter":59,"../../controls/text-box":60,"./patient-panel":30,"querystring":68}],30:[function(require,module,exports){
const moment = require('moment');

const Control = require('../../controls/control');
const Scrolled = require('../../controls/scrolled');
const Spinner = require('../../controls/spinner');
const ResourcePanel = require('../../controls/panel/resource-panel');
const PatientForm = require('../form/patient-form');
const AdmissionPanel = require('../panel/admission-panel')


class PatientBanner extends Control {
    constructor(options={}) {
        super(options)

        this._fieldElements = {}
    }

    setValue(data) {
        for (const [key, elem] of Object.entries(this._fieldElements)) {
            if (data[key]) {
                elem.innerHTML = data[key]
            }
        }
    }

    createElement() {
        super.createElement()

        this.element.className = 'patient-banner'

        var detailsElement = document.createElement('div');
        detailsElement.className = 'details'
        this.element.appendChild(detailsElement)

        this._fieldElements['name'] = document.createElement('h1');
        detailsElement.appendChild(this._fieldElements['name']);

        this._fieldElements['sex'] = document.createElement('span');
        detailsElement.appendChild(this._fieldElements['sex']);

        var slash = document.createTextNode(' / ')
        detailsElement.appendChild(slash)

        this._fieldElements['age'] = document.createElement('span');
        detailsElement.appendChild(this._fieldElements['age']);

        var numberElement = document.createElement('div');
        numberElement.className = 'number';
        this.element.appendChild(numberElement);

        var col1 = document.createElement('div')
        col1.innerHTML = "NIC No.: "
        numberElement.appendChild(col1)
        var col2 = document.createElement('div')
        col2.innerHTML = "Hosp No.: "
        numberElement.appendChild(col2)
        var col3 = document.createElement('div')
        col3.innerHTML = "Phone No.: "
        numberElement.appendChild(col3)

        this._fieldElements['national_id_no'] = document.createElement('span');
        col1.appendChild(this._fieldElements['national_id_no']);

        this._fieldElements['hospital_no'] = document.createElement('span');
        col2.appendChild(this._fieldElements['hospital_no'])

        this._fieldElements['phone_no'] = document.createElement('span');
        col3.appendChild(this._fieldElements['phone_no']);

        return this.element
    }
}


module.exports = class PatientPanel extends Scrolled {
    constructor(options={}) {
        super(options)

        this.patient = null;

        this.patientBanner = new PatientBanner();

        this.patientDetails = new ResourcePanel(
            new PatientForm(),
            (patient) => {
                this.patientBanner.setValue(patient)
            },
            {
                title: "Patient Details",
                className: "patient-details"
            }
        )

        this.spinner = new Spinner();

        this.admissionPanel = new AdmissionPanel(
            {
                spinner: this.spinner
            }
        )
    }

    _setPatient(patient, onDone, admission) {
        this.patient = patient;

        this.patientBanner.setValue(this.patient)
        this.patientBanner.show()

        this._bodyElement.style.display = '';

        this.patientDetails.setValue(patient)
        this.patientDetails.show()

        
        this.admissionPanel.show()

        if (admission) {
            this.admissionPanel.setAdmission(admission)
            return
        }
        this.admissionPanel.setPatient(patient)
        
        onDone()
    }

    setPatient(patient, onDone, onFailed, admission) {
        this.patientBanner.setValue(patient)
        this.patientBanner.show()

        this.patientDetails.hide()
        this.patientDetails.collapse()

        this._bodyElement.style.display = 'none';
        this._errorElement.style.display = 'none';

        this.spinner.reset()
        this.spinner.show();
        connection.get(
            patient.url,
            patient => {
                this._setPatient(patient, onDone, admission)
            },
            (error) => {
                this._errorElement.style.display = ''
                onFailed();
                if (error.status == 404) {
                    this._errorElement.innerHTML = 'Patient Not Found'
                    return
                }
                this._errorElement.innerHTML = `Failed to load patient: ${error.message}`
            },
            () => {
                this.spinner.hideSoft();
            }
        )
    }


    createElement() {
        super.createElement();

        this.element.id = 'patient-panel';

        this.element.appendChild(this.spinner.createElement());
        this.spinner.hideSoft();

        this._container = document.createElement('div');
        this._container.className = 'container';
        this.element.appendChild(this._container)

        this._container.appendChild(this.patientBanner.createElement())

        this._container.appendChild(this.patientDetails.createElement())
        this.patientDetails.collapse()

        this._bodyElement = document.createElement('div');
        this._bodyElement.className = 'body';
        this._container.appendChild(this._bodyElement);

        this._bodyElement.appendChild(this.admissionPanel.createElement())

        this._errorElement = document.createElement('div');
        this._errorElement.className = 'error';
        this._container.appendChild(this._errorElement);

        this.patientBanner.hide()
        this.patientDetails.hide()
        this._bodyElement.style.display = 'none';
        this._errorElement.style.display = 'none';
        
        return this.element;
    }

}
},{"../../controls/control":35,"../../controls/panel/resource-panel":51,"../../controls/scrolled":56,"../../controls/spinner":58,"../form/patient-form":17,"../panel/admission-panel":25,"moment":2}],31:[function(require,module,exports){
class ResponseError extends Error {
	constructor(response) {
		var message = `Response Error ${response.status} ${response.statusText}`;
		super(message);
		this.status = response.status;
		this.data = response.data
	}
}

module.exports = function status(response) {
	if (!(response.status == 200 || response.status == 422 )) {
		return Promise.reject(new ResponseError(response));
	}
	return Promise.resolve(response);
}

},{}],32:[function(require,module,exports){
const status = require("./status");


module.exports = class User {
    constructor() {
        this.username = null;
        //this.fullname = null
        this.password = null;
        this.token = null;
        this.token_expire_time = null;
        this.url = null;
        this.token_url = null;
        this.data = null;
    }


    tokenValid() {
        if (this.token === null) {
            return false;
        }
        if ((new Date().getTime() / 1000) > this.token_expire_time) {
            this.token = null;
            this.token_expire_time = null;
            return false;
        }
        return true;
    }

    getName() {
        //if (this.data.f == null) {
        //    return this.username;
        //}
        return this.data.complete_name;
    }


    getToken(on_success, on_failed) {
        let headers = new Headers();
        headers.set(
            'Authorization',
            'Basic ' + btoa(this.username + ":" + this.password)
        );

        fetch(this.token_url, { method: 'GET', headers: headers })
            .then(status)
            .then(response => response.json())
            .then(data => {
                this.token = data['token'];
                this.token_expire_time = (new Date().getTime() / 1000) + data['expiration'];
                on_success();
            })
            .catch(error => {
                on_failed(new Error(`Failed to get token, ${error.message}.`));
            })
    }


    getAuthorizationHeaders() {
        let headers = new Headers();
        headers.set(
            'Authorization',
            'Basic ' + btoa(this.token + ":")
        );
        return headers;
    }


    getUserData(on_success, on_failed) {
        let headers = this.getAuthorizationHeaders();

        fetch(this.url, { method: 'GET', headers: headers })
            .then(status)
            .then(response => response.json())
            .then(data => {
                //this.fullname = data.fullname;
                this.data = data;
                on_success();
            })
            .catch(error => {
                on_failed(new Error(`Failed to get user data. ${error.message}`));
            })
    }


    login(index_url, username, password, on_success, on_failed) {
        this.username = username;
        this.password = password;

        let headers = new Headers();
        headers.set(
            'Authorization',
            'Basic ' + btoa(this.username + ":" + this.password)
        );

        function checkCredentials(data) {
            if (!("auth_token" in data)) {
                return Promise.reject(new Error("Unexpected data."));
            }
            return Promise.resolve(data)
        }

        fetch(index_url, { method: 'GET', headers: headers })
            .then(status)
            .then(response => response.json())
            .then(data => checkCredentials(data))
            .then(resource_index => {
                this.token_url = resource_index['auth_token'];
                this.getToken(
                    () => {
                        this.url = resource_index['user'];
                        this.getUserData(
                            () => {
                                on_success(resource_index)
                            }, 
                            on_failed
                        );
                    },
                    on_failed
                );
            })
            .catch((error) => {
                if (error.status == 401) {
                    on_failed(new Error('Invalid Username or Password'));
                } else {
                    on_failed(new Error(`Login error. ${error.message}`));
                }
            })
    }
}
},{"./status":31}],33:[function(require,module,exports){
const Wizard = require('../../controls/wizard/wizard')
const WizardPage = require('../../controls/wizard/wizard-page')
const WizardForm = require('../../controls/wizard/wizard-form')
const ResourceSearchBox = require('../../controls/resource-search-box')

const Form = require("../../controls/form/form")
const PatientForm = require('../form/patient-form')
const AdmissionDetailsForm = require('../form/admission-details-form')
const ProblemsForm = require('../form/problems-form')
const AdmissionNotesForm = require('../form/admission-notes-form')
const DischargeNotesForm = require('../form/discharge-notes-form')
const PrescriptionForm = require('../form/prescription-form')

const StatusDialog = require("../../controls/dialog/status-dialog")


class PatientPage extends WizardForm {
    constructor(options = {}) {
        options.title = "Patient Details"

        super(new PatientForm(), options)

        this._selectedPatient = null;

        this._searchBox = new ResourceSearchBox(
            (item) => {
                return item.id
            },
            (item) => {
                return `${item.name} (${item.national_id_no})`
            },
            (item) => {
                this._selectedPatient = item
                if (!item) {
                    this.form.clear()
                    this.form.unlock()
                    return
                }
                this.form.setValue(item)
                this.form.lock()
                this._loadPatient()
            },
            {
                placeholder: 'Select Patient',
                displaySelected: true,
                displayNull: true,
                nullLabel: '[New Patient]',
                resourceIndex: ['patients'],
                popupHeight: '50%'
            }
        )
    }

    _loadPatient() {
        if (!this._selectedPatient) {
            return
        }

        connection.get(
            this._selectedPatient.url,
            (patient) => {
                this.form.setValue(patient)
            }
        )
    }

    validate() {
        if (this._selectedPatient) {
            return true
        }
        return super.validate()
    }

    value() {
        if (this._selectedPatient) {
            return this._selectedPatient
        }
        return super.value()
    }

    setValue(value) {
        if ("id" in value) {
            this._selectedPatient = value
            this._searchBox.setValue(value)
            this.form.setValue(value)
            this.form.lock()
            this._loadPatient()
            return
        }
        this._selectedPatient = null
        this.form.setValue(value)
        this.form.unlock()
    }

    show() {
        super.show()
        this.form.lock()
        //Need to call unlock on form for proper sizing or
        //growing of text boxes
        if (!this._selectedPatient) {
            this.form.unlock()
        }
    }

    createElement() {
        super.createElement()
        
        this.element.prepend(this._searchBox.createElement())
        this._searchBox._textBox.element.tabIndex = -1

        return this.element
    }
}


class AdmissionDetails extends WizardForm {
    constructor(options = {}) {
        options.title = "Admission Details"
        super(new AdmissionDetailsForm(), options)
    }
}


class Problems extends WizardForm {
    constructor(options = {}) {
        options.title = "Diagnosis"
        super(new ProblemsForm(), options)
    }

    value() {
        return super.value()
    }
}


class AdmissionNotes extends WizardForm {
    constructor(options = {}) {
        options.title = "Admission Notes"
        super(new AdmissionNotesForm(), options)        
    }
}


class Investigations extends WizardPage {
    constructor(options = {}) {
        options.title = "Investigations"
        super(options)
    }

    value() {
        return []
    }
}

class ProceduresReports extends WizardPage {
    constructor(options = {}) {
        options.title = "Procedures/ Reports/ Other Notes"
        super(options)
    }

    value() {
        return []
    }
}

class DischargeNotes extends WizardForm {
    constructor(options = {}) {
        options.title = "Discharge Notes"
        super(new DischargeNotesForm(), options)

    }
}

class Prescription extends WizardForm {
    constructor(options = {}) {
        options.title = "Discharge Prescription"
        super(new PrescriptionForm(), options)
    }
}

class ReviewPage extends WizardPage {
    constructor(options = {}) {
        options.title = "Review Admission"
        super(options)

        this.newPatient = new PatientForm({title: "Patient Details"})
        this.admissionDetails = new AdmissionDetailsForm({title: "Admission Details"})
        this.problems = new ProblemsForm({title: "Diagnosis"})
        this.admissionNotes = new AdmissionNotesForm({title: "Admission Notes"})
        this.investigations = new Form({title: "Investigations"})
        this.proceduresReports = new Form({title: "Procedures/ Reports/ Other Notes"})
        this.dischargeNotes = new DischargeNotesForm({title: "Discharge Prescription"})
        this.prescription = new PrescriptionForm({title: "Prescription"})
    }

    show(wizard) {
        super.show(wizard)

        this.newPatient.setValue(wizard.newPatient.value())
        this.admissionDetails.setValue(wizard.admissionDetails.value())
        this.problems.setValue(wizard.problems.value())
        this.admissionNotes.setValue(wizard.admissionNotes.value())
        this.investigations.setValue(wizard.investigations.value())
        this.proceduresReports.setValue(wizard.proceduresReports.value())
        this.dischargeNotes.setValue(wizard.dischargeNotes.value())
        this.prescription.setValue(wizard.prescription.value())

        this.newPatient.lock()
        this.admissionDetails.lock()
        this.problems.lock()
        this.admissionNotes.lock()
        this.investigations.lock()
        this.proceduresReports.lock()
        this.dischargeNotes.lock()
        this.prescription.lock()
    }

    createElement() {
        super.createElement()

        this.element.appendChild(this.newPatient.createElement())
        this.element.appendChild(this.admissionDetails.createElement())
        this.element.appendChild(this.problems.createElement())
        this.element.appendChild(this.admissionNotes.createElement())
        this.element.appendChild(this.investigations.createElement())
        this.element.appendChild(this.proceduresReports.createElement())
        this.element.appendChild(this.dischargeNotes.createElement())
        this.element.appendChild(this.prescription.createElement())

        return this.element
    }
}

module.exports = class AdmissionWizard extends Wizard {
    constructor(options) {
        super(options)

        this.newPatient = new PatientPage()
        this.admissionDetails = new AdmissionDetails()
        this.problems = new Problems()
        this.admissionNotes = new AdmissionNotes()
        this.investigations = new Investigations()
        this.proceduresReports = new ProceduresReports()
        this.dischargeNotes = new DischargeNotes()
        this.prescription = new Prescription()
        this.reviewPage = new ReviewPage()

        this.addPage(this.newPatient)
        this.addPage(this.admissionDetails)
        this.addPage(this.problems)
        this.addPage(this.admissionNotes)
        this.addPage(this.investigations)
        this.addPage(this.proceduresReports)
        this.addPage(this.dischargeNotes)
        this.addPage(this.prescription)
        this.addPage(this.reviewPage)
    }

    value() {
        var admission = Object.assign(
            {},
            this.admissionDetails.value(),
            this.admissionNotes.value(),
            this.dischargeNotes.value(),
        )

        if (admission.initial_vitalsigns) {
            admission.initial_vitalsigns.start_time = admission.start_time
        }

        admission['problems'] = []
        this.problems.value().problems.forEach((problem) => {
            problem.start_time = admission.start_time
            admission['problems'].push(problem)
        })

        admission['patient'] = this.newPatient.value()
        admission['encounters'] = this.investigations.value().concat(this.proceduresReports.value())
        admission['prescription'] = this.prescription.value().prescription

        return admission
    }

    setValue(data) {
        this.newPatient.setValue(data['patient'])
        this.admissionDetails.setValue(data)
        this.admissionNotes.setValue(data)
        this.dischargeNotes.setValue(data)
        //this.encounters.setValue(data)
        this.problems.setValue(data)
        this.prescription.setValue(data)
    }

    _onNext() {
        super._onNext()
        localStorage.setItem('wizard_draft', JSON.stringify(this.value()))
    }

    show(afterSave, onCancel) {
        super.show(afterSave, onCancel)

        var data = JSON.parse(localStorage.getItem('wizard_draft'))

        console.log(data)

        if (data) {
            this.setValue(data)
        }
    }

    _invalidFieldsList(invalid_fields) {
        if (!invalid_fields) {
            return ""
        }
        if (typeof invalid_fields === 'string') {
            return invalid_fields
        }
        var result = `<ul>`
        for (const [field_name, message] of Object.entries(invalid_fields)) {
            console.log(message)
            result += `<li><b>${field_name}</b>: ${this._invalidFieldsList(message)}</li>`
        }
        result += `</ul>`
        return result
    }

    onSave(data) {
        var statusDialog = new StatusDialog()

        statusDialog.show(
            'Saving...',
            'Please Wait.',
            false
        )

        connection.post(
            connection.resource_index.admissions,
            data,
            (response) => {
                if (response.error) {
                    statusDialog.setTitle("Failed")
                    statusDialog.setMessage(
                        `${response.error}` + this._invalidFieldsList(response.invalid_fields)
                    )
                    if (response.invalid_fields) {
                        statusDialog.maximize()
                    }
                    statusDialog.showDismiss()
                    return
                }

                statusDialog.setTitle("Success")
                statusDialog.setMessage(
                    `Successfully saved admission details of ${data.patient.name}.`
                )
                statusDialog.showDismiss(
                    () => {
                        this.afterSave(response)
                        this.hide()
                    }
                )
            },
            (error) => {
                console.log(error)
                statusDialog.setTitle("Failed")
                statusDialog.setMessage(
                    `An error occured while saving ${error}.`
                )
                statusDialog.showDismiss()
            },
            () => {}
        )
    }
}
},{"../../controls/dialog/status-dialog":40,"../../controls/form/form":46,"../../controls/resource-search-box":55,"../../controls/wizard/wizard":63,"../../controls/wizard/wizard-form":61,"../../controls/wizard/wizard-page":62,"../form/admission-details-form":10,"../form/admission-notes-form":11,"../form/discharge-notes-form":14,"../form/patient-form":17,"../form/prescription-form":19,"../form/problems-form":21}],34:[function(require,module,exports){
const Control = require("./control");

module.exports = class Button extends Control {
    constructor(label, onClick, options) {
        /* Options
         *  style = <blan>|primary
         */
        super(options);
        this.label = label;
        this.onClick = onClick;
    }

    lock() {
        this.element.disabled = true
    }

    unlock() {
        this.element.disabled = false
    }

    createElement() {
        this.element = document.createElement('button');
        this.element.style.minWidth = this.options.width;
        this.element.style.minHeight = this.options.height;

        if (this.options.style) {
            this.element.classList.add(this.options.style)
        }

        if (this.options.className) {
            this.element.classList.add(this.options.className)
        }
        
        this.element.innerHTML = this.label;

        this.element.addEventListener('click', (ev) => {
            ev.preventDefault();
            this.onClick(ev);
        })

        return this.element
    }

}

},{"./control":35}],35:[function(require,module,exports){

module.exports = class Control {
    constructor(options = {}) {
        /* Options
         *  widht, height =  css size
         *  className = class name of the element
         *  id = html id of element
         */
        this.element = null;
        this.options = options;

        this._display = null
    }

    focus() {
        this.element.focus();
    }

    removeElement() {
        if (this.element == null) {
            return
        }
        parent = this.element.parentElement

        if (parent == null) {
            return
        }

        parent.removeChild(this.element);
    }

    createElement(tagName) {
        if (!tagName) {
            tagName = 'div'
        }

        //Create the element
        this.element = document.createElement(tagName);

        //Add styles
        //this.element.style.display = "flex";
        if (this.options.id) {
            this.element.id = this.options.id
        }
        if (this.options.className) {
            this.element.classList.add(this.options.className)
        }
        this.element.style.userSelect = "none";
        this.element.style.width = this.options.width;
        this.element.style.height = this.options.height;

        //Attache events

        return this.element;
    }

    hideSoft() {
        this.element.style.visibility = 'hidden';
    }

    hide() {
        this._display = this.element.style.display
        this.element.style.display = "none";
    }

    isVisible() {
        if (this.element.style.display == "none") {
            return false
        }
        if (this.element.style.visibility == 'hidden') {
            return false
        }
        return true
    }

    isInView(elem, parent) {
        if (!elem) {
            elem = this.element
        }

        if (!elem) {
            return false
        }

        if (!parent) {
            parent = elem.parentElement
        }

        var rect = elem.getBoundingClientRect();
        var parentRect = parent.getBoundingClientRect();
        //const windowHeight = (window.innerHeight || parent.clientHeight);

        var windowHeight = Math.min(window.innerHeight, parent.clientHeight);

        var elemTop = rect.top - parentRect.top

        const vertInView = (elemTop + rect.height <= windowHeight) && ((elemTop) >= 0);

        return (vertInView);
    }

    lock() {
        this.element.classList.add('locked')
    }

    unlock() {
        this.element.classList.remove('locked')
    }

    show() {
        if (this._display) {
            if (this._display != 'none') {
                this.element.style.display = this._display;
            }
            this.element.style.display = ''
        } else {
            this.element.style.display = '';
        }
        
        this.element.style.visibility = '';
    }
}

},{}],36:[function(require,module,exports){
const moment = require('moment');

exports.toUTCDateTime = (localisodatetime_str) => {
    return moment(localisodatetime_str, 'YYYY-MM-DDTHH:mm').utc().toDate()
}


exports.toLocalDateTimeIsoString = (utc_datetime) => {
    return moment.utc(utc_datetime).local().format('YYYY-MM-DDTHH:mm')
}

exports.toUTCDate = (localisodate_str) => {
    return moment(localisodate_str, 'YYYY-MM-DD').utc().toDate()
}


exports.toLocalDateIsoString = (utc_date) => {
    return moment.utc(utc_date).local().format('YYYY-MM-DD')
}


exports.toLocalDateFormatted = (utc_datetime) => {
    return moment.utc(utc_datetime).local().format('LLL')
}
},{"moment":2}],37:[function(require,module,exports){
const Dialog = require("./dialog");
const Button = require("../button");


module.exports = class ConfirmDialog extends Dialog {
    constructor(options={}) {
        options.noCloseButton = true
        options.centered = true
        super(options)

        this.btnOk = new Button(
            options.okLabel != null ? options.okLabel : 'Yes',
            (ev) => {
                this._onOk(ev);
                this.hide()
            },
            {
                width: '80px'
            }
        );

        this.btnCancel = new Button(
            options.cancelLabel != null ? options.cancelLabel : 'No',
            (ev) => {
                this._onCancel(ev);
            },
            {
                width: '80px'
            }
        );
    }

    show(title, message, onOk, onCancel) {
        super.show(onCancel)
        this._onOk = onOk

        this.setTitle(title)
        this.messageElement.innerHTML = message
    }

    createElement() {
        super.createElement()

        this.element.className = 'foreground-centered-small'

        this.footerElement.appendChild(this.btnOk.createElement())
        this.footerElement.appendChild(this.btnCancel.createElement())

        this.messageElement = document.createElement('div')
        this.messageElement.className = 'message'
        this.bodyElement.appendChild(this.messageElement)

        return this.element
    
    }
}
},{"../button":34,"./dialog":38}],38:[function(require,module,exports){
const createFocusTrap = require("focus-trap")
const Control = require("../control");


module.exports = class Dialog extends Control {
    constructor(options={}) {
        /* Options
         *  centered=false
         *  title="Title"
         *  groupButtons=false
         *  noCloseButton=false
         */
        super(options);

        this.onCancel = null;
        //this.onOk = null;

        this.headerElement = null;
        this.bodyElement = null;
        this.footerElement = null;
        this._titleElement = null;
        this._dialogElement = null;
        this._closeElement = null;
    }

    value() {
        return null;
    }

    //show(onOk, onCancel) {
    show(onCancel) {
        this.onCancel = onCancel;

        document.body.appendChild(this.createElement());
        
        super.show();
        this.focusTrap.activate()
    }

    hide() {
        super.hide();
        this.focusTrap.deactivate()

        document.body.removeChild(this.element);
        this.headerElement = null;
        this.bodyElement = null;
        this.footerElement = null;
        this._titleElement = null;
        this._dialogElement = null;
        this._closeElement = null;
    }

    
    _onCancel(ev) {
        this.hide();
        this.onCancel();
    }


    setTitle(title) {
        if (!this._titleElement) {
            this._titleElement = document.createElement('h1');
            this.headerElement.appendChild(this._titleElement);
        }
        this._titleElement.innerHTML = title;
    }

    createElement() {
        //this.element = document.createElement('div');
        super.createElement();

        this.focusTrap = createFocusTrap(this.element);

        if (this.options.centered == true){
            this.element.className = 'foreground-centered';
        } else {
            this.element.className = 'foreground';
        }

        this._dialogElement = document.createElement('div');
        this._dialogElement.className = 'dialog';
        //this._dialogElement.style.userSelect = "none";
        //this._dialogElement.style.display = "flex";
        //this._dialogElement.style.flexDirection = "column"
        //this._dialogElement.style.width = this.options.width;
        //this._dialogElement.style.height = this.options.height;
        this.element.appendChild(this._dialogElement);

        var header = document.createElement('div');
        header.className = 'dialog-header';
        header.style.display = 'flex';
        //header.style.flexDirection = 'row';
        this._dialogElement.appendChild(header);
        
        this.headerElement = document.createElement('div');
        //this.headerElement.style.display = 'flex';
        this.headerElement.className = 'dialog-header-content';
        //this.headerElement.style.flexGrow = 1;
        header.appendChild(this.headerElement);

        if (!this.options.noCloseButton) {
            this._closeElement = document.createElement('div');
            this._closeElement.className = 'dialog-close';
            this._closeElement.innerHTML = '&times;'
            this._closeElement.addEventListener('click', (ev) => {
                this._onCancel();
            });
            header.appendChild(this._closeElement);
        }

        this.bodyElement = document.createElement('div');
        this.bodyElement.className = 'dialog-body';
        //this.bodyElement.style.flexGrow = 1;
        this._dialogElement.appendChild(this.bodyElement);

        this.footerElement = document.createElement('div');
        this.footerElement.className = 'dialog-footer';
        if (this.options.groupButtons) {
            this.footerElement.classList.add('button-group-row')
        }
        this._dialogElement.appendChild(this.footerElement);

        super.hide();

        this.element.addEventListener('click', (ev) => {
            //this._onCancel();
        });

        this._dialogElement.addEventListener('click', (ev) => {
            ;
        })

        if (this.options.title) {
            this.setTitle(this.options.title)
        }

        //this.bodyElement.innerHTML = 'Some shit that is in a dialog is here now';
        //this.footerElement.innerText = 'This is the footer'

        return this.element;
    }

}
},{"../control":35,"focus-trap":1}],39:[function(require,module,exports){
const Dialog = require("./dialog");
const Button = require("../button");


module.exports = class FormDialog extends Dialog {
    constructor(form, options={}) {
        super(options)

        this.form = form;

        this.onOk = null;

        this.btnOk = new Button(
            options.okLabel != null ? options.okLabel : 'Ok',
            (ev) => {
                this._onOk(ev);
            }
        );

        this.btnCancel = new Button(
            options.cancelLabel != null ? options.cancelLabel : 'Cancel',
            (ev) => {
                this._onCancel(ev);
            }
        )
    }

    value() {
        return this.form.value();
    }

    show(onOk, onCancel) {
        this.onOk = onOk
        super.show(onCancel)
    }

    _onOk(ev) {
        if (this.form.validate() == false) {
            return;
        }
        this.onOk()
        //super._onOk(ev);
    }

    createElement() {
        super.createElement();

        this.bodyElement.className = 'dialog-body-padded';
        this.bodyElement.appendChild(this.form.createElement());

        this.footerElement.appendChild(this.btnCancel.createElement());
        this.footerElement.appendChild(this.btnOk.createElement());

        return this.element;
    }

}
},{"../button":34,"./dialog":38}],40:[function(require,module,exports){
const Dialog = require("./dialog");
const Button = require("../button");
const Spinner = require("../spinner")


module.exports = class StatusDialog extends Dialog {
    constructor(options={}) {
        options.noCloseButton = true
        options.centered = true
        super(options)

        this.btnOk = new Button(
            options.okLabel != null ? options.okLabel : 'Ok',
            (ev) => {
                this._onOk(ev);
            },
            {
                width: '80px'
            }
        );

        this._afterDismiss = null

        this.spinner = new Spinner()
    }

    setMessage(message) {
        this.messageElement.innerHTML = message
    }

    showSpinner() {
        this.spinner.show()
    }

    hideSpinner() {
        this.spinner.hideSoft()
    }

    showDismiss(afterDismiss) {
        this._afterDismiss = afterDismiss
        this.btnOk.show()
        this.hideSpinner()
    }

    _onOk() {
        if (this._afterDismiss) {
            this._afterDismiss()
        }
        this.hide()
    }

    maximize() {
        this.element.className = "foreground"
    }

    show(title, message, dissmissable=true) {
        super.show(onCancel)

        this.setTitle(title)
        this.messageElement.innerHTML = message

        if (!dissmissable) {
            this.btnOk.hide()
        } else{
            this.hideSpinner()
        }
    }

    createElement() {
        super.createElement()

        this.element.className = 'foreground-centered-small'

        this.footerElement.appendChild(this.btnOk.createElement())

        this.bodyElement.appendChild(this.spinner.createElement())

        this.messageElement = document.createElement('div')
        this.messageElement.className = 'message'
        this.bodyElement.appendChild(this.messageElement)

        return this.element
    }
}
},{"../button":34,"../spinner":58,"./dialog":38}],41:[function(require,module,exports){
const datetime_format = require('../datetime')

const TextField = require("./text-field");


module.exports = class DateField extends TextField {
    constructor(name, options = {}) {
        options.type = 'date';
        super(name, options);

        this._value = null;
    }

    value() {
        var value = super.value()
        if (!value) {
            return null
        }
        return datetime_format.toUTCDate(value)
    }

    setValue(value) {
        if (!value) {
            super.setValue("")
            return
        }
        super.setValue(datetime_format.toLocalDateIsoString(value))
    }

    lock() {
        this._locked = true;
        if (this.value() == null) {
            this.element.style.display = 'none';
        }
        this._textBox.lock();
        this.element.classList.add('locked')
    }

    unlock() {
        this._locked = false;
        this.element.style.display = 'flex';
        this._textBox.unlock();
        this.element.classList.remove('locked')
    }
    

    isValid() {
        if (!super.isValid()) {
            return false;
        }
        if (isNaN(this.value())){
            return false;
        }
        return true;
    }
}
},{"../datetime":36,"./text-field":48}],42:[function(require,module,exports){
const datetime_format = require('../datetime')

const TextField = require("./text-field");


module.exports = class DateTimeField extends TextField {
    constructor(name, options = {}) {
        options.type = 'datetime-local';
        super(name, options);

        this._value = null;
    }

    value() {
        var value = super.value()
        if (!value) {
            return null
        }
        return datetime_format.toUTCDateTime(value)
    }

    setValue(value) {
        if (!value) {
            super.setValue("")
            return
        }
        super.setValue(datetime_format.toLocalDateTimeIsoString(value))
    }

    lock() {
        this._locked = true;
        if (this.value() == null) {
            this.element.style.display = 'none';
        }
        this._textBox.lock();
        this.element.classList.add('locked')
    }

    unlock() {
        this._locked = false;
        this.element.style.display = 'flex';
        this._textBox.unlock();
        this.element.classList.remove('locked')
    }
    

    isValid() {
        if (!super.isValid()) {
            return false;
        }
        if (isNaN(this.value())){
            return false;
        }
        return true;
    }
}
},{"../datetime":36,"./text-field":48}],43:[function(require,module,exports){

const Control = require("../control");

module.exports = class Field extends Control {
    constructor(name, options = {}) {
        /*Options
         *  label=""
         *  labelSize=in css units
         *  labelTop=false
         *  required=true|false
         *  invalidFeedback=""
         *  helpText=""
         *  placeholder=""
         *  narrow=false
         */
        super(options);
        this.name = name;
        //this.label = label;

        this._labelElement = null;
        this._placeholderElement = null;
        this._helpElement = null;
        this._invalidElement = null;

        this._locked = false;
    }

    value() {
        return;
    }

    setValue(value) {
        if (this._locked) {
            if (!value) {
                this.hide()
                return
            }
            this.show()
        }
    }

    setLabel(text) {
        this.options.label = text
        if (this._labelElement != null) {
            this._labelElement.innerText = text;
        }
    }

    setData(data) {
        //Expects a dictionary with key equal to name
        this.setValue(
            data[this.name]
        );
    }

    isBlank() {
        return false;
    }

    isValid() {
        if (this.options.required == true) {
            if (this.isBlank()) {
                return false;
            }
        }
        return true;
    }

    validate() {
        this.markValid();

        var isValid = this.isValid();
        if (!isValid) {
            this.markInvalid();
        }

        return isValid;
    }

    markInvalid(message) {
        this.element.classList.add('invalid');
        if (message) {
            if (!this._invalidElement) {
                this._createInvalidElement(message)
            } else {
                this._invalidElement.innerHTML = message
            }
        }
    }

    markValid() {
        this.element.classList.remove('invalid');
    }

    lock() {
        this._locked = true;
        if (this.isBlank()) {
            this.hide()
        }
        this.element.classList.add('locked')
    }

    unlock() {
        this._locked = false;
        this.element.style.display = 'flex';
        this.element.classList.remove('locked')
    }

    _createInvalidElement(message) {
        var displayMessage = ""
        if (message) {
            displayMessage += message
        }
        if (this.options.invalidFeedback) {
            displayMessage += this.options.invalidFeedback
        }

        this._invalidElement = document.createElement('div');
        this._invalidElement.className = 'invalid-feedback';
        this._invalidElement.innerHTML = displayMessage;
        this._content.appendChild(this._invalidElement);
    }

    createElement() {
        super.createElement()

        this.element.classList.add('field');

        if (this.options.narrow) {
            this.element.classList.add('narrow')
        }

        if (this.options.label != null) {
            var label = this.options.label
            if (this.options.required == true) {
                label += " *"
            }
            this._labelElement = document.createElement('label');
            this._labelElement.innerHTML = label;
            this._labelElement.style.width = this.options.labelSize;
            //this.element.appendChild(this._labelElement);
        }
        
        this._content = document.createElement('div');
        this._content.className = 'content';
        //this._content.style.display = 'flex';
        //this._content.style.flexDirection = 'column';
        //this._content.style.flexGrow = 1;
        //this.element.appendChild(content);

        if (this.options.label == null) {
            this.element.appendChild(this._content);
        } else if (this.options.labelTop == true) {
            this._content.appendChild(this._labelElement);
            this.element.appendChild(this._content);
        } else {
            this.element.appendChild(this._labelElement);
            this.element.appendChild(this._content);
        }

        this._placeholderElement = document.createElement('div');
        this._placeholderElement.className = "input-placeholder"
        //this._placeholderElement.style.display = 'flex';
        //this._placeholderElement.style.flexGrow = 1;
        this._content.appendChild(this._placeholderElement);

        if (this.options.helpText != null) {
            this._helpElement = document.createElement('div');
            this._helpElement.className = 'help-text';
            this._helpElement.innerHTML = this.options.helpText;
            this._content.appendChild(this._helpElement);
        }

        if (this.options.invalidFeedback != null) {
            this._createInvalidElement()
        }
        
        return this.element
    }
}

},{"../control":35}],44:[function(require,module,exports){
const TextField = require("./text-field");


module.exports = class FloatField extends TextField {
    constructor(name, options = {}) {
        options.type = 'number';
        super(name, options);
    }

    value() {
        var value = super.value();
        if (value == "") {
            return null
        }
        return value;
    }

    setValue(value) {
        if (!value) {
            super.setValue("")
            return
        }
        super.setValue(value)
    }

    isValid() {
        if (!super.isValid()) {
            return false;
        }
        if (isNaN(this.value())) {
            return false;
        }
        return true;
    }
}
},{"./text-field":48}],45:[function(require,module,exports){
const Field = require("./field")
const Form = require("./form")

module.exports = class FormField extends Field {
    constructor(name, options={}) {
        super(name, options);

        this.form = new Form(
            {
                compact: true
            }
        )
    }

    value() {
        if (this.isBlank()) {
            return null
        }
        return this.form.value();
    }

    setValue(value) {
        if (!value) {
            this.form.clear()
            return
        }
        
        super.setValue(value)
        this.form.setValue(value)
    }

    isBlank() {
        return this.form.isBlank();
    }

    isValid() {
        if (this.options.required == true) {
            return this.form.isValid()
        }
        if (!this.isBlank()) {
            return this.form.isValid()
        }
        return true
    }

    validate() {
        var valid = false;
        this.markValid();

        if (this.options.required == true || !this.isBlank()) {
            var valid = this.form.validate()
            if (!valid) {
                this.markInvalid()
            }
            return valid;
        }
        
        this.form._fields.forEach((field) => {
            field.markValid()
        })
        return true
    }

    lock() {
        super.lock()

        this.form.lock()
    }

    unlock() {
        super.unlock()

        this.form.unlock()
    }

    createElement() {
        super.createElement()

        this._placeholderElement.appendChild(this.form.createElement())

        return this.element
    }

}
},{"./field":43,"./form":46}],46:[function(require,module,exports){
const Control = require("../control");


module.exports = class Form extends Control {
    constructor(options={}) {
        /*Options
         *  labelSize=in css units
         *  labelTop=false
         *  //flexDirection='column|row'
         *  title='Heading title'
         *  compact=false
         */
        super(options);

        this._fields = [];
        this._fieldNames = [];
    }

    addField(field) {
        if (this.options.labelSize != null) {
            field.options.labelSize = this.options.labelSize;
        }
        if (this.options.labelTop != null) {
            field.options.labelTop = this.options.labelTop;
        }

        this._fields.push(field);
        this._fieldNames.push(field.name);
    }

    setValue(value) {
        if (!value) {
            this.clear()
            return
        }
        //Value is dictionary with fieldName: value
        for (var i = 0; i < this._fieldNames.length; i++) {
            this._fields[i].setValue(
                value[this._fieldNames[i]]
            );
        }
    }

    value() {
        //Returns a dictionary with fieldName: value
        var result = {};
        for (var i = 0; i < this._fieldNames.length; i++) {
            result[this._fieldNames[i]] = this._fields[i].value();
        }
        return result;
    }

    isBlank() {
        var blank = true;
        for (var i = 0; i < this._fieldNames.length; i++) {
            if (!this._fields[i].isBlank()) {
                blank = false
                return blank
            }
        }
        return blank;
    }

    getFieldByName(fieldName) {
        return this._fields[this._fieldNames.findIndex((value) => { return value == fieldName;})];
    }

    setFieldLabel(fieldName, label) {
        this.getFieldByName(fieldName).setLabel(label);
    }

    setFieldValue(fieldName, value) {
        this.getFieldByName(fieldName).setValue(value);
    }

    fieldValue(fieldName) {
        return this.getFieldByName(fieldName).value();
    }

    hideField(fieldName) {
        this.getFieldByName(fieldName).hide();
    }

    isValid() {
        var isValid = true

        this._fields.forEach((field) => {
            if (field.isValid() == false) {
                isValid = false
                return isValid
            }
        });

        return isValid;
    }

    validate() {
        var isValid = true;

        this._fields.forEach((field) => {
            if (field.validate() == false) {
                isValid = false;
            }
        });

        return isValid;
    }

    clear() {
        this._fields.forEach((field) => {
            field.setValue(null)
        })
    }

    lock() {
        this._fields.forEach((field) => {
            field.lock();
        });
        this.clearValidation()
    }

    unlock() {
        this._fields.forEach((field) => {
            field.unlock();
        });
        this.clearValidation()
    }

    clearValidation() {
        this._fields.forEach((field) => {
            field.markValid();
        });
    }

    markInvalidFields(invalid_fields) {
        for (const [field_name, message] of Object.entries(invalid_fields)) {
            this.getFieldByName(field_name).markInvalid(message)
        }
    }

    createElement() {
        super.createElement('form');

        this.element.classList.add("form")

        if (this.options.compact) {
            this.element.classList.add("compact")
        }

        if (this.options.title) {
            var title = document.createElement('h1')
            title.innerHTML = this.options.title
            this.element.appendChild(title)
        }


        this._fields.forEach((field) => {
            this.element.appendChild(field.createElement());
        })

        return this.element;
    }

}
},{"../control":35}],47:[function(require,module,exports){
const Select = require("../select");
const Field = require("./field");


module.exports = class SelectField extends Field {
    constructor(name, idFunction, labelFunction, options = {}) {
        /*opions
         *  data=the options to display
         *  onlyId=value returned/set is only id
         */
        super(name, options);

        this._select = new Select(
            idFunction,
            labelFunction,
            {
                placeholder: options.placeholder,
                data: options.data,
                onlyId: options.onlyId
            }
        );
    }

    focus() {
        this._select.focus();
    }

    isBlank() {
        return this._select.isBlank();
    }

    value() {
        return this._select.value();
    }

    setValue(value) {
        super.setValue(value)
        this._select.setValue(value);
    }

    setData(data) {
        this._select.setData(data);
    }

    clear() {
        this._select.clear();
    }

    lock() {
        super.lock()
        this._select.lock();
    }

    unlock() {
        super.unlock()
        this._select.unlock();
    }

    createElement() {
        super.createElement()

        this._placeholderElement.appendChild(
            this._select.createElement()
        );

        //this._select.element.style.flexGrow = 1;

        return this.element;
    }

}
},{"../select":57,"./field":43}],48:[function(require,module,exports){
const TextBox = require("../text-box");
const Field = require("./field");


module.exports = class TextField extends Field {
    constructor(name, options = {}) {
        super(name, options);

        this._textBox = new TextBox({
            placeholder: options.placeholder,
            type: options.type,
            rows: options.rows,
            resize: options.resize,
            grow: options.grow,
            maxGrow: options.maxGrow
        });
    }

    focus() {
        this._textBox.focus();
    }

    isBlank() {
        return this._textBox.isBlank();
    }

    value() {
        return this._textBox.value();
    }

    displayValue() {
        return this.value();
    }

    setValue(value) {
        super.setValue(value);
        this._textBox.setValue(value);
        if (this._lockedView.style.display != 'none') {
            this._lockedView.innerHTML = this.displayValue();
        }
    }

    lock() {
        super.lock();
        //this._textBox.lock();
        //this._textBox.element.style.display = 'none';
        this._textBox.hide()
        this._lockedView.style.display = 'flex';
        this._lockedView.innerHTML = this.displayValue();
    }

    unlock() {
        super.unlock();
        //this._textBox.unlock();
        //this._textBox.element.style.display = 'flex';
        this._textBox.show()
        this._lockedView.style.display = 'none';
    }

    createElement() {
        super.createElement()

        this._placeholderElement.appendChild(
            this._textBox.createElement()
        );

        this._lockedView = document.createElement('div');
        this._lockedView.className = 'locked-text-box';
        this._lockedView.style.display = 'none';
        this._placeholderElement.appendChild(this._lockedView)

        //this._textBox.element.style.flexGrow = 1;

        return this.element;
    }
}

},{"../text-box":60,"./field":43}],49:[function(require,module,exports){
const Scrolled = require("./scrolled");

module.exports = class ListBox extends Scrolled {
    constructor(idFunction, labelFunction, onSelectItem, options) {
        /* idFunction(result) { return result.unique_id }
         * labelFunction(result) { return result.label }
         * onResultClicked(result) { do something using result }
         * 
         */
        super(options);

        this.idFunction = idFunction;
        this.labelFunction = labelFunction;
        this.onSelectItem = onSelectItem;

        this.data = [];
        this._itemIds = [];
        //this._itemElements = [];

        this._listDataItems = {};
        this._listChildElems = {};

        this._listElement = null;

        this._selectedItem = null;
        this._selectedElement = null;

        this._focusedElement = null;

        this._locked = false;

        this._onItemClicked = (event) => {
            if (this._locked) {
                return;
            }
            this.clearSelection();

            this._selectedElement = event.currentTarget;
            
            this._highlightSelection();
            this._onSelectItem(event);
        }
    }

    lock() {
        this._locked = true;
        this.element.classList.add('locked');
    }

    unlock() {
        this._locked = false;
        this.element.classList.remove('locked')
    }

    _createListItem(itemid, label) {
        var item = document.createElement('li');
        item.setAttribute('item-id', itemid);
        item.innerHTML = label;

        item.addEventListener('click', this._onItemClicked);

        return item;
    }

    _highlightSelection() {
        this._selectedElement.className = 'selected';
    }

    _onSelectItem(event) {
        this._selectedItem = null;
        this._selectedItemId = this._selectedElement.getAttribute('item-id');

        if (this._selectedItemId == null) {
            this._selectedItem = null
        } else {
            this._selectedItem = this._listDataItems[this._selectedItemId];
        }
        
        this.onSelectItem(this._selectedItem);
    }

    value() {
        return this._selectedItem;
    }

    setSelection(itemId, scroll=true) {
        this.clearSelection();
        if (itemId == null || itemId == '') {
            if (this.options.displayNull) {
                this._selectedItem = this._listElement.firstChild
                this._highlightSelection()
                if (scroll) {
                    this.scrollToElement(this._selectedElement)
                }
            }
            return;
        }
        
        this._selectedItemId = itemId

        this._selectedItem = this._listDataItems[itemId]
        
        this._selectedElement = this._listChildElems[itemId];
        this._highlightSelection();
        if (scroll) {
            this.scrollToElement(this._selectedElement);
        }
    }

    selectFocused() {
        if (!this._focusedElement) {
            return
        }

        var item_id = this._focusedElement.getAttribute('item-id');

        if (!item_id) {
            if (this.options.displayNull) {
                this.clearSelection()
                this.onSelectItem(null)
            }
            return
        }

        this.setSelection(item_id)
        this.onSelectItem(this._selectedItem);
    }

    focusUp() {
        var elem = null;

        if (!this._focusedElement) {
            elem = this._listElement.lastChild
        } else {
            elem = this._focusedElement.previousSibling
        }

        this.clearFocus()

        if (!elem) {
            return
        }

        this._focusedElement = elem
        this._focusedElement.classList.add("focused")
        this.scrollToElement(this._focusedElement)
    }

    focusDown() {
        var elem = null;

        if (!this._focusedElement) {
            elem = this._listElement.firstChild
        } else {
            elem = this._focusedElement.nextSibling
        }

        this.clearFocus()

        if (!elem) {
            return
        }

        this._focusedElement = elem
        this._focusedElement.classList.add("focused")
        this.scrollToElement(this._focusedElement)
    }

    clearFocus() {
        if (this._focusedElement != null) {
            this._focusedElement.classList.remove("focused")
        }
        this._focusedElement = null
    }

    clearSelection() {
        if (this._selectedElement != null) {
            this._selectedElement.className = '';
        }
        this._selectedElement = null;

        this._selectedItemId = null
        this._selectedItem = null;
    }

    _clear() {
        this.clearFocus()
        
        while (this._listElement.firstChild) {
            this._listElement.firstChild.remove();
        }

        this._listChildElems = {}
        this._listDataItems = {}
        this._data = null;
        //this._itemIds = [];
    }

    _appendData(data) {
        if (this.data == null) {
            this.data = data;
        } else {
            this.data = this.data.concat(data);
        }

        data.forEach((item) => {
            var item_id = this.idFunction(item)
            
            //this._itemIds.push(item_id);

            this._listDataItems[item_id] = item
            
            this._listChildElems[item_id] = this._createListItem(
                item_id,
                this.labelFunction(item)
            );

            this._listElement.appendChild(this._listChildElems[item_id]);
        })
    }

    setData(data) {
        this._clear();
        this._appendData(data);
    }

    /*
    appendData(data) {
        this._appendData()
        return
        if (!this.data) {
            this.data = data
        } else {
            this.data = this.data.concat(data);
        }
        this.displayData(true);
    }*/
    /*
    displayData(noScroll) {
        this._clear();
        
        this._itemIds = [];
        this._itemElements = [];
        this.data.forEach((item) => {
            var item_id = this.idFunction(item);

            this._itemIds.push(item_id);

            var elem = this._createListItem(
                item_id,
                this.labelFunction(item)
            );

            this._listElement.appendChild(elem);
            this._itemElements.push(elem);
        })

        if (!noScroll) {
            this.element.scrollTop = 0;
        }       
    }*/

    createElement() {
        super.createElement();

        this.element.classList.add('list-box');
        this.element.style.display = 'block'
        
        this._listElement =  document.createElement('ul');
        //this._listElement.style.display = 'block'
        this.element.appendChild(this._listElement);

        return this.element;
    }
}
},{"./scrolled":56}],50:[function(require,module,exports){
const Control = require("../control");
const Button = require("../button");


module.exports = class CollapsePanel extends Control {
    constructor (options={}) {
        super(options);

        this.btnExpand = new Button(
            '<span class="arrow"></span>',
            (event) => {
                this._onToggleExpand()
            },
            {
                className: 'expand-button',
                style: 'clear'
            }
        )

    }

    _onToggleExpand() {
        if (this.element.classList.contains('collapsed')) {
            this.element.classList.remove('collapsed')
            return
        }
        this.element.classList.add('collapsed')
    }

    collapse() {
        this.element.classList.add('collapsed')
    }

    expand() {
        this.element.classList.remove('collapsed')
    }

    setValue() {

    }

    setTitle(title) {
        this.titleElement.innerHTML = title
    }

    createElement() {
        super.createElement()

        this.element.classList.add('collapse-panel')

        this.headerElement = document.createElement('div')
        this.headerElement.className = 'header'
        this.element.appendChild(this.headerElement)

        this.headerElement.appendChild(this.btnExpand.createElement())

        this.titleElement = document.createElement('div')
        this.titleElement.className = 'title'
        if (this.options.title) {
            this.titleElement.innerHTML = this.options.title
        }
        this.headerElement.appendChild(this.titleElement)

        this.bodyElement = document.createElement('div')
        this.bodyElement.className = 'body'
        this.element.appendChild(this.bodyElement)

        return this.element
    }
}
},{"../button":34,"../control":35}],51:[function(require,module,exports){
//const Control = require("../control");
const Button = require("../button");
const Spinner = require("../spinner");
const CollapsePanel = require("./collapse-panel");

module.exports = class ResourcePanel extends CollapsePanel {
    constructor (form, onSaved, options={}) {
        super(options);

        this.form = form
        this.onSaved = onSaved

        this._data = null

        this.spinner = new Spinner()

        this.btnEdit = new Button(
            'Edit',
            (event) => {
                this._onEdit()
            }
        )

        this.btnSave = new Button(
            'Save',
            (event) => {
                this._onSave()
            }
        )

        this.btnCancel = new Button(
            'Cancel',
            (event) => {
                this._onCancel()
            }
        )
    }

    _onEdit() {
        this.unlock()
    }

    _onCancel() {
        this.form.setValue(this._data)
        this.lock()
    }

    _onSave() {
        if (!this.form.validate()) {
            this.statusElem.innerHTML = "Marked fields are not valid"
            return
        }

        if (!this._data.url) {
            this.statusElem.innerHTML = "No target URL found"
            return
        }

        console.log(this.form.value())

        this.transient()
        this.spinner.show()
        this.statusElem.innerHTML = "Saving.."
        connection.post(
            this._data.url,
            this.form.value(),
            (response) => {
                console.log(response)
                if (response.error) {
                    this.statusElem.innerHTML = response.error
                    if (response.invalid_fields) {
                        this.statusElem.innerHTML = "Marked fields are not valid"
                        this.form.markInvalidFields(response.invalid_fields)
                    } else {
                        this.statusElem.innerHTML = response.message
                    }
                    this.unlock()
                    return
                }
                this.statusElem.innerHTML = "Saved"
                this.form.setValue(response)
                if (this.onSaved) {
                    this.onSaved(response)
                }
                this.lock()
            },
            (error) => {
                this.statusElem.innerHTML = `Could Not Save`
                this.unlock()
            },
            () => {
                this.spinner.hideSoft()
            }
        )
    }

    transient() {
        this.form.lock()
        this.btnSave.hide()
        this.btnCancel.hide()
        this.btnEdit.hide()
    }

    lock() {
        this.form.lock()
        this.btnEdit.show()
        this.btnSave.hide()
        this.btnCancel.hide()
    }

    unlock() {
        this.form.unlock()
        this.btnEdit.hide()
        this.btnSave.show()
        this.btnCancel.show()
    }

    setValue(value) {
        this._data = value

        this.form.setValue(this._data)
        this.form.lock()
        this.btnEdit.show()
        this.btnSave.hide()
        this.btnCancel.hide()
        this.statusElem.innerHTML = ""
    }

    value() {
        this.form.value()
    }

    createElement() {
        super.createElement()

        this.element.classList.add('resource-panel')

        this.toolBarElement = document.createElement('div');
        this.toolBarElement.className = 'toolbar'
        this.headerElement.appendChild(this.toolBarElement)

        this.toolBarElement.appendChild(this.btnEdit.createElement())
        this.toolBarElement.appendChild(this.btnSave.createElement())
        this.toolBarElement.appendChild(this.btnCancel.createElement())

        this.statusElem = document.createElement('div')
        this.statusElem.className = 'resource-status'

        this.toolBarElement.prepend(this.statusElem)

        this.bodyElement.appendChild(this.spinner.createElement())
        this.bodyElement.appendChild(this.form.createElement())

        this.form.lock()
        this.btnEdit.show()
        this.btnSave.hide()
        this.btnCancel.hide()
        this.spinner.hideSoft()

        return this.element
    }
}
},{"../button":34,"../spinner":58,"./collapse-panel":50}],52:[function(require,module,exports){
const Control = require("./control");

module.exports = class Popup extends Control {
    constructor(referenceControl, options) {
        super(options);

        this.referenceControl = referenceControl

        this._resizeFunction = (ev) => {
            this._updateSize();
        }
    }

    _updateSize() {
        this.element.style.marginTop = (this.referenceControl.element.clientHeight) + 'px';
        this.element.style.width = (this.referenceControl.element.offsetWidth-0.5) + 'px';
    }

    popup() {
        this._updateSize()
        this.show();
        window.addEventListener('resize', this._resizeFunction);
    }

    hide() {
        super.hide();
        window.removeEventListener('resize', this._resizeFunction);
    }

    createElement() {
        super.createElement();

        this.element.className = 'popup';
        //this.element.style.position = 'absolute';
        this.element.style.width = this.options.width;
        this.element.style.maxHeight = this.options.height;

        this.hide();

        return this.element;
    }
}
},{"./control":35}],53:[function(require,module,exports){
const ListBox = require("./list-box")
const Spinner = require("./spinner")

module.exports = class ResourceList extends ListBox {
    constructor(idFunction, labelFunction, onSelectItem, options) {
        /* idFunction(result) { return result.unique_id }
         * labelFunction(result) { return result.label }
         * onResultClicked(result) { do something using result }
         * autoLoadNext = false
         * cache = false
         * displayNull
         *  nullLabel
         * 
         */
        super(idFunction, labelFunction, onSelectItem, options);

        //this.options.cache = true;

        this.spinner = new Spinner();

        this.resource_data = {}

        this._discardNext = true;

        this._cache = {}
    }

    setResourceUrl(url, onDone) {
        if (this.options.cache) {
            if (this._cache[url]) {
                this.resource_data = this._cache[url];
                this.setData(this.resource_data.items);
                if (onDone) {
                    onDone();
                }
                return;
            }
        }

        this._discardNext = true;
        this.spinner.show();
        this._listElement.style.display = 'none';
        connection.get(
            url,
            data => {
                if (this.options.cache) {
                    this._cache[url] = data;
                }
                this.resource_data = data;
                this.setData(this.resource_data.items);
                if (onDone) {
                    onDone();
                }
            },
            (error) => {
                console.log(error);
                this._clear();
                this.resource_data = {};
                if (this.options.displayNull) {
                    this._createNullElement()
                }
                if (error.status == 404) {
                    this._createFailedElement('Not Found...')
                } else {
                    this._createFailedElement()
                }
            },
            () => {
                this.spinner.hide();
                this._listElement.style.display = 'block';
            }
        )
    }

    selectFocused() {
        if (!this._focusedElement) {
            return
        }

        var next_url = this._focusedElement.getAttribute('next-url');

        if (!next_url) {
            super.selectFocused()
        }

        this.focusUp()
        this._onLoadNextClicked()
    }

    _onLoadNextClicked() {
        if (this._nextElement != null) {
            this._listElement.removeChild(this._nextElement);
        }
        this._nextElement = null;

        var url = this.resource_data.next;

        if (this.options.cache) {
            if (this._cache[url]) {
                this.resource_data = this._cache[url];
                this._appendData(this.resource_data.items)
                return;
            }
        }

        this._discardNext = false;
        this.spinner.show();
        
        connection.get(
            url,
            data => {
                if (this.options.cache) {
                    this._cache[url] = data;
                }
                if (this._discardNext == false) {
                    this.resource_data = data;
                    this._appendData(this.resource_data.items)
                }
            },
            (error) => {
                if (this._discardNext == false) {
                    console.log(error);
                    //this.resource_data = {};
                    //this._clear();
                    if (error.status == 404) {
                        this._createFailedElement('Not Found...')
                    } else{
                        this._createNextElement("Failed to load, retry...")
                        this.options.autoLoadNext = false;
                    }
                }
                
            },
            () => {
                this.spinner.hide();
            }
        )
    }

    _nextElemVisible() {
        if (this._nextElement == null) {
            return false;
        }

        var rect = this._nextElement.getBoundingClientRect();
        
        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);

        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);

        return (vertInView);
    }

    _autoLoadNext() {
        if (!this.options.autoLoadNext) {
            return
        }

        if (!this._nextElemVisible()) {
            return;
        }

        this._onLoadNextClicked();
    }

    _clear() {
        super._clear();

        this._nextElement = null;
        this._failedElement = null;
    }

    _createNextElement(label="Load More...") {
        if (this._nextElement != null) {
            this._listElement.removeChild(this._nextElement);
            this._nextElement = null;
        }
        if (this.resource_data.next) {
            this._nextElement = document.createElement('li');
            this._nextElement.setAttribute('next-url', this.resource_data.next);
            this._nextElement.className = 'button'
            this._nextElement.innerHTML = label;
            this._nextElement.addEventListener('click', (event) => { 
                this._onLoadNextClicked(event) 
            } )
            this._listElement.appendChild(this._nextElement);
        }
    }

    _createNullElement(label) {
        if (!label) {
            if (this.options.nullLabel && !label) {
                label = this.options.nullLabel
            } else {
                label = "--"
            }
        }
        
        this._nullElement = document.createElement('li')
        this._nullElement.setAttribute('item-id', '');
        this._nullElement.innerHTML = label
        this._nullElement.addEventListener('click', this._onItemClicked)
        this._listElement.prepend(this._nullElement)
    }

    setData(data) {
        super.setData(data)
        if (this.options.displayNull) {
            this._createNullElement()
        }
    }

    _appendData(data) {
        super._appendData(data)
    
        this._createNextElement()
    }


    _createFailedElement(label="Failed to Load") {
        if (this._failedElement != null) {
            this._listElement.removeChild(this._failedElement)
        }
        this._failedElement = document.createElement('li')
        this._failedElement.className = 'button';
        this._failedElement.innerHTML = label;
        this._listElement.appendChild(this._failedElement);
    }


    createElement() {
        super.createElement();

        //this.element.style.flexDirection = 'column';
        //this._listElement.style.flexGrow = 0;

        this.element.appendChild(this.spinner.createElement());
        //this.spinner.hide();

        if (this.options.autoLoadNext) {
            this.element.addEventListener('scroll', () => {
                this._autoLoadNext();
            })
        }

        this.spinner.hide()

        return this.element;
    }
}
},{"./list-box":49,"./spinner":58}],54:[function(require,module,exports){
const ResourceList = require('./resource-list');


module.exports = class ResourceRadioList extends ResourceList {
    constructor(idFunction, labelFunction, onSelectItem, options) {
        /* idFunction(result) { return result.unique_id }
         * labelFunction(result) { return result.label }
         * onResultClicked(result) { do something using result }
         * 
         * Options:
         *  height
         *  onLink
         */
        super(idFunction, labelFunction, onSelectItem, options);

        this._onItemClicked = (event) => {
            this.clearSelection();

            this._selectedElement = event.target.parentElement;

            this._highlightSelection();
            this._onSelectItem(event);
        }
    }

    _highlightSelection() {
        //this._selectedElement.className = 'selected';
        this._selectedElement.firstChild.checked = true;
    }

    clearSelection() {
        if (this._selectedElement != null) {
            this._selectedElement.className = null;
            this._selectedElement.firstChild.checked = false;
        }
        this._selectedElement = null;

        this._selectedItem = null;
    }

    _createListItem(itemid, label) {
        var item = document.createElement('li');
        item.setAttribute('item-id', itemid);

        var radio = document.createElement('input');
        radio.type = 'radio';
        //radio.tabIndex = -1;
        item.appendChild(radio);

        var labelElement = document.createElement('div');
        item.appendChild(labelElement);
        labelElement.innerHTML = label;

        radio.addEventListener('change', this._onItemClicked);

        return item;
    }

    _appendData(data) {
        super._appendData(data);

        if (this.options.onLink != null) {
            var links = this.element.getElementsByTagName('a');
            for (var i = 0; i < links.length; i++) {
                links[i].addEventListener('click', this.options.onLink)
                links[i].tabIndex = -1
            }
        }
    }
}
},{"./resource-list":53}],55:[function(require,module,exports){
//const SearchBox = require("./search-box");
const url = require("url");
const querystring = require('querystring');

const Control = require("./control");
const Popup = require("./popup");
const TextBox = require("./text-box");
const ResourceList = require("./resource-list");


module.exports = class ResourceSearchBox extends Control {
    constructor(idFunction, labelFunction, onSelectResult, options={}) {
        /*
         * idFunction(result) { return result.unique_id }
         * labelFunction(result) { return result.label }
         * onSelectResult(result) { do something using code }
         * 
         * Options:
         *  placeholder
         *  popupHeight
         *  cache
         *  displaySelected
         *  displayNull
         *  nullLabel
         *  resourceIndex = ['path','to','index']
         */
        super(options);
        this.idFunction = idFunction;
        this.labelFunction = labelFunction;
        this.onSelectResult = onSelectResult;
        this.resourceUrl = "";

        this._selelctedItem = null;

        this._textBox = new TextBox({
            placeholder: options.placeholder
        })

        this._popup = new Popup(
            this._textBox,
            {
                height: options.popupHeight
            }
        );

        this._listBox = new ResourceList(
            idFunction,
            labelFunction,
            (result) => {
                this._onSelectResult(result);
            },
            {
                cache: options.cache,
                displayNull: options.displayNull,
                nullLabel: options.nullLabel
            }
        )
    }

    focus() {
        this._textBox.focus()
    }

    value() {
        return this._selelctedItem;
    }

    setValue(value) {
        this._selelctedItem = value;
        this._displaySelected();
    }

    isBlank() {
        if (this._selelctedItem == null) {
            return true;
        }
        return false;
    }

    lock() {
        this._textBox.lock()
    }

    unlock() {
        this._textBox.unlock()
    }

    setResourceUrl(url) {
        this.resourceUrl = url;
    }

    _search() {
        var query = this._textBox.value();

        if  (query == "") {
            if (this.options.displaySelected == null) {
                this._hidePopup();
                return;
            }
        }

        this._showPopup();

        if (this.options.resourceIndex) {
            this.resourceUrl = connection.resourceFromPath(this.options.resourceIndex)
        }

        var parts = url.parse(this.resourceUrl, true);
        parts.query.q = query
        delete parts.search;

        this._listBox.setResourceUrl(
            url.format(parts)
        )
    }

    _showPopup() {
        this._textBox.element.classList.add('flat-bottom');
        this._listBox.element.classList.add('flat-top');
        this._popup.popup()
    }

    _hidePopup() {
        this._textBox.element.classList.remove('flat-bottom');
        this._listBox.element.classList.remove('flat-top');
        this._popup.hide();
    }

    _onSelectResult(result) {
        this._hidePopup();
        this._selelctedItem = result;
        this._displaySelected();
        this.onSelectResult(this._selelctedItem);
    }

    _displaySelected() {
        
        if (this.options.displaySelected == true) {
            var value = this._selelctedItem;
            if (value) {
                this._textBox.setValue(this.labelFunction(this._selelctedItem))
                return
            }
            this._textBox.setValue('')
        }
    }

    createElement() {
        super.createElement();

        this.element.className = 'search-box';

        this.element.appendChild(
            this._textBox.createElement()
        );

        this.element.appendChild(
            this._popup.createElement()
        );

        this._popup.element.appendChild(
            this._listBox.createElement()
        );

        this._textBox.element.addEventListener('keydown', (event) => {
            if (event.code == 'ArrowUp') {
                event. preventDefault()
                if (!this._popup.isVisible()) {
                    this._listBox.clearFocus()
                    this._search()
                }
                this._listBox.focusUp()
            } else if (event.code == 'ArrowDown') {
                event. preventDefault()
                if (!this._popup.isVisible()) {
                    this._listBox.clearFocus()
                    this._search()
                }
                this._listBox.focusDown()
            }
        })

        
        this._textBox.element.addEventListener('keyup', (event) => {
            if (event.code == 'Enter') {
                event. preventDefault()
                this._listBox.selectFocused()
            } 
        });

        this._textBox.element.addEventListener('input', (event) => {
            this._search();
        })

        this._textBox.element.addEventListener('focusin', (event) => {
            if (this._textBox.isLocked()) {
                return
            }

            if (this.options.displaySelected) {
                //if (this._selelctedItem == null) {
                this._textBox.setValue("")
                //}
            }

            this._listBox.clearFocus()

            this._search();
        })

        var blurEvent = (ev) => {
            this._hidePopup();
            this._displaySelected();
        };

        this._textBox.element.addEventListener('blur', blurEvent)

        this._popup.element.addEventListener('mouseenter', (event) => {
            this._textBox.element.removeEventListener('blur', blurEvent);
        })

        this._popup.element.addEventListener('mouseleave', (event) => {
            this._textBox.element.addEventListener('blur', blurEvent)
        })

        this._displaySelected();

        return this.element;
    }
}
},{"./control":35,"./popup":52,"./resource-list":53,"./text-box":60,"querystring":68,"url":69}],56:[function(require,module,exports){
const Control = require("./control");

module.exports = class Scrolled extends Control {
    constructor(options) {
        super(options);
    }

    scrollTo(position) {
        this.element.scrollTo(0, position);
    }

    scrollToElement(element, testVisibility=true) {
        if (testVisibility) {
            if (this.isInView(element, this.element)) {
                return
            }
        }
        this.scrollTo(0)
        //var pos = element.offsetTop - this.element.offsetTop
        var pos = element.offsetTop
        this.scrollTo(pos)
    }

    createElement() {
        super.createElement();

        this.element.classList.add('scrolled');

        return this.element;
    }
}

},{"./control":35}],57:[function(require,module,exports){
const Control = require("./control");


module.exports = class Select extends Control {
    constructor(idFunction, labelFunction, options) {
        /* Options
         *  placeholder=""
         *  data = [ {name: a, value: b} ,  ]
         *  onlyId=value returned/set is only id
         *  
         */
        super(options);

        this.idFunction = idFunction;
        this.labelFunction = labelFunction;

        this.data = [];
        this._itemIds = [];
    }

    value() {
        var selectedId = this.element.value;
        for (var i = 0; i < this._itemIds.length; i++) {
            if (this._itemIds[i] == selectedId) {
                if (this.options.onlyId) {
                    return this.idFunction(this.data[i])
                }
                return this.data[i];
            }
        }
        return null;
    }

    setValue(value) {
        if (!value) {
            this.setSelection(null)
            return
        }
        if (this.options.onlyId) {
            this.setSelection(value)
            return
        }
        this.setSelection(this.idFunction(value));
    }

    setData(data) {
        this.data = data;
        this.displayData();
    }

    clear() {
        this.data = [];
        this._itemIds = []
        this._itemElements = []
        this._clear();
    }

    setSelection(itemId) {
        this.element.value = itemId;
    }

    _clear() {
        while (this.element.firstChild) {
            this.element.firstChild.remove();
        }
    }

    _createListItem(itemid, label) {
        var item = document.createElement('option');
        item.setAttribute('value', itemid);
        item.innerText = label;

        return item;
    }

    displayData() {
        this._clear();

        this.element.appendChild(this._createListItem(
            null,
            `-- ${this.options.placeholder == null ? '' : `${this.options.placeholder} --`}`
        ));

        this._itemIds = []
        this._itemElements = []
        this.data.forEach((item) => {
            var item_id = this.idFunction(item);

            this._itemIds.push(item_id);

            var elem = this._createListItem(
                item_id,
                this.labelFunction(item)
            );

            this.element.appendChild(elem);
        })
    }

    isBlank() {
        if (this.value() == null) {
            return true;
        }
        return false;
    }

    lock() {
        this.element.setAttribute('disabled', '');
    }

    unlock() {
        this.element.removeAttribute('disabled');
    }

    createElement() {
        this.element = document.createElement('select');

        if (this.options.placeholder != null) {
            this.element.setAttribute('placeholder', this.options.placeholder);
        }

        if (this.options.data) {
            this.setData(this.options.data)
        }

        return this.element
    }

}

},{"./control":35}],58:[function(require,module,exports){
const Control = require("./control");

module.exports = class Spinner extends Control {
    constructor(options) {
        super(options);

        this._spinnerElement = null;
        this._labelElement = null;

        this._activeJobs = 0
    }

    setLabel(label) {
        this._labelElement.innerHtml = label;
    }

    reset() {
        this._activeJobs = 0
    }

    show() {
        this._activeJobs += 1
        super.show();
    }

    hide() {
        this._activeJobs -= 1
        if (this._activeJobs < 1) {
            this._activeJobs = 0
            super.hide()
        }
    }

    hideSoft() {
        this._activeJobs -= 1
        if (this._activeJobs < 1) {
            this._activeJobs = 0
            super.hideSoft()
        }
    }


    createElement() {
        super.createElement();

        this.element.className = 'spinner-container';

        this._spinnerElement = document.createElement('div');
        this._spinnerElement.className = 'spinner';
        this.element.appendChild(this._spinnerElement);

        this._labelElement = document.createElement('div');
        this._labelElement.className = 'spinner-label';
        this.element.appendChild(this._labelElement);

        return this.element;
    }
}
},{"./control":35}],59:[function(require,module,exports){
const Control = require('./control');


module.exports = class Spitter extends Control {
    constructor(pane1, pane2, options = {}) {
        /* Options
         *  direction = 'row'|'column' (default='row')
         *  pane1Size = css size (if pane1Size is given, pane2Size is ignored)
         *  ((pane2Size = css size)) -> This Does not work
         *  minSize = int
         */
        super(options);

        this.pane1 = pane1;
        this.pane2 = pane2;

        this.resizerSize = 5;
        this.resizerElement = null;

        this.minSize = this.options.minSize != null ? this.options.minSize : 50;

        this.pos1 = null;
        this.pos2 = null;
        this.pos3 = null;
        this.pos4 = null;

        this._resizeMouseDown = (ev) => {
            ev.preventDefault();
            this.pos3 = ev.clientX;
            this.pos4 = ev.clientY;
            document.addEventListener('mousemove', this._resizeMouseMove);
            document.addEventListener('mouseup', this._resizeMouseUp);
        }

        this._resizeMouseMove = (ev) => {
            ev.preventDefault();
            this.pos1 = this.pos3 - ev.clientX;
            this.pos2 = this.pos4 - ev.clientY;
            this.pos3 = ev.clientX;
            this.pos4 = ev.clientY;
            this._resize();
        }

        this._resizeMouseUp = (ev) => {
            document.removeEventListener('mousemove', this._resizeMouseMove);
            document.removeEventListener('mouseup', this._resizeMouseUp);
        }
    }

    setPane1Active() {
        if (!this.pane1.element || !this.pane2.element) {
            return
        }
        this.pane1.element.classList.add('active-pane');
        this.pane2.element.classList.remove('active-pane');
    }

    setPane2Active() {
        if (!this.pane1.element || !this.pane2.element) {
            return
        }
        this.pane2.element.classList.add('active-pane');
        this.pane1.element.classList.remove('active-pane');
    }


    _setElementHeight(element, height) {
        element.style.height = height;
    }


    _setElementWidth(element, width) {
        element.style.width = width;
    }


    _setWidths(pane1Width, pane2Width) {
        this._setElementWidth(this.pane1.element, pane1Width);
        this._setElementWidth(this.pane2.element, pane2Width);
    }

    _setHeights(pane1Height, pane2Height) {
        this._setElementHeight(this.pane1.element, pane1Height);
        this._setElementHeight(this.pane2.element, pane2Height);
    }


    _resize() {
        if (this.options.direction == 'column') {
            var maxSize = this.element.offsetHeight - this.minSize;
            if (this.options.pane1Size != null) {
                var size = (this.pane1.element.offsetHeight - this.pos2);
                if (size > maxSize) { return }
                if (size < this.minSize) { return }
                this._setHeights(
                    `${size}px`,
                    `calc(100% - ${size}px)`
                )
                
            } else {
                var size = (this.pane2.element.offsetHeight + this.pos2);
                if (size > maxSize) { return }
                if (size < this.minSize) { return }
                this._setHeights(
                    `calc(100% - ${size}px)`,
                    `${size}px`
                )
            }
        } else {
            var maxSize = this.element.offsetWidth - this.minSize;
            if (this.options.pane1Size != null) {
                var size = (this.pane1.element.offsetWidth - this.pos1);
                if (size >= maxSize) { return }
                if (size < this.minSize) { return }
                this._setWidths(
                    `${size}px`,
                    `calc(100% - ${size}px)`
                )
            } else {
                var size = (this.pane2.element.offsetWidth + this.pos1);
                if (size > maxSize) { return }
                if (size < this.minSize) { return }
                this._setWidths(
                    `calc(100% - ${size}px)`,
                    `${size}px`
                )
            }
        }
    }


    _createResizerElement() {
        this.resizerElement = document.createElement('div');
        this.resizerElement.style.zIndex = '100';
        this.resizerElement.className = 'resizer';
        if (this.options.direction == 'column') {
            this.resizerElement.style.height = (this.resizerSize) + 'px';
            this.resizerElement.style.marginTop = '-' + (this.resizerSize / 2) + 'px';
            this.resizerElement.style.marginBottom = '-' + (this.resizerSize / 2) + 'px';
            this.resizerElement.style.cursor = 'ns-resize'
        } else {
            this.resizerElement.style.width = (this.resizerSize) +'px';
            this.resizerElement.style.marginLeft = '-' + (this.resizerSize / 2) +'px';
            this.resizerElement.style.marginRight = '-' + (this.resizerSize / 2) +'px';
            this.resizerElement.style.cursor = 'ew-resize'
        }

        this.resizerElement.addEventListener('mousedown', this._resizeMouseDown);

        return this.resizerElement;
    }


    createElement() {
        super.createElement();

        if (this.options.direction == 'column') {
            this.element.className = "splitter-column"
        } else {
            this.element.className = "splitter-row"
        }

        this.element.appendChild(this.pane1.createElement());
        this.pane1.element.classList.add("pane1");

        if (this.options.pane1Size != null || this.options.pane2Size != null) {
            if (this.options.resizable == true) {
                this.element.appendChild(this._createResizerElement());
            }
        }
        
        this.element.appendChild(this.pane2.createElement())
        this.pane2.element.classList.add("pane2");

        if (this.options.pane1Size != null) {            
            if (this.options.direction == 'column') {
                this._setHeights(
                    `${this.options.pane1Size}`,
                    `calc(100% - ${this.options.pane1Size})`
                )
            } else {
                this._setWidths(
                    `${this.options.pane1Size}`,
                    `calc(100% - ${this.options.pane1Size})`
                )
            }
        } else {
            if (this.options.pane2Size != null) {                
                if (this.options.direction == 'column') {
                    this._setHeights(
                        `calc(100% - ${this.options.pane2Size})`,
                        `${this.options.pane2Size}`
                    )
                } else {
                    this._setWidths(
                        `calc(100% - ${this.options.pane2Size})`,
                        `${this.options.pane2Size}`
                    )
                }
            } else {
                //this.pane1.element.style.flexGrow = 1;
                //this.pane2.element.style.flexGrow = 1;
            }
        }

        this.setPane1Active();

        return this.element;
    }
}
},{"./control":35}],60:[function(require,module,exports){
const Control = require("./control");

const VALID_TYPES = ['text', 'date', 'datetime-local', 'password', 'email', 'tel', 'number', 'time', 'url']

module.exports = class TextBox extends Control {
    constructor(options) {
        /* Options
         *  placeholder=""
         *  type=VALID_TYPE or textarea
         *  rows=2
         *  grow
         *  maxGrow
         */
        super(options);
    }

    value() {
        return this.element.value;
    }

    setValue(value) {
        this.element.value = value;
        if (this.options.grow && this.options.type == 'textarea') {
            requestAnimationFrame(() => {
                this._fitToContents()
            })
        }
    }

    isBlank() {
        if (this.element.value == '') {
            return true;
        }
        return false;
    }

    lock() {
        this.element.setAttribute('readonly', '');
    }

    unlock() {
        this.element.removeAttribute('readonly');
        this._fitToContents()
    }

    show() {
        super.show()
        requestAnimationFrame(
            () => {
                this._fitToContents()
            }
        )
    }

    isLocked() {
        if (this.element.hasAttribute('readonly')) {
            return true
        }
        return false
    }

    _fitToContents() {
        if (!this.options.grow) {
            return
        }
        
        if (this.element.style.display == 'none') {
            return
        }

        if (this.element.scrollHeight == 0) {
            return
        }

        this.element.style.overflow = 'hidden'
        this.element.style.height = '';

        var height = this.element.scrollHeight + 2
        if (this.options.maxGrow) {
            if (height > this.options.maxGrow) {
                height = this.options.maxGrow + 'px';
                this.element.style.overflow = 'auto'
            }
        }
        this.element.style.height = height + 'px';
    }

    select() {
        try
        {
          txtCustomer.selectionStart = 0;
          txtCustomer.selectionEnd = txtCustomer.value.length;
        }
        catch (error)
        {
          txtCustomer.select();
        }
    }

    createElement() {
        if (this.options.type == 'textarea') {
            this.element = document.createElement('textarea');
            if (this.options.rows != null) {
                this.element.style.height = `${this.options.rows}em`
            } else {
                this.element.rows = 1
            }
            
            if (this.options.resize != true) {
                this.element.style.resize = 'none'
            }
            if (this.options.grow == true) {
                this.element.addEventListener('input', (event) => {
                    this._fitToContents()
                })
            }
        } else {
            this.element = document.createElement('input');
            if (VALID_TYPES.includes(this.options.type)) {
                this.element.setAttribute('type', this.options.type);
            }
        }

        this.element.setAttribute('size', 1);

        if (this.options.onKeyUp) {
            this.element.addEventListener('keyup', (ev) => {
                this.options.onKeyUp(ev);
            })
        }

        if (this.options.placeholder != null) {
            this.element.setAttribute('placeholder', this.options.placeholder);
        }

        return this.element
    }

}

},{"./control":35}],61:[function(require,module,exports){
const WizardPage = require('./wizard-page')
const Form = require('../../controls/form/form')

module.exports = class WizardForm extends WizardPage {
    constructor(form, options) {
        super(options)

        if (!form) {
            this.form = new Form(
                {
                    labelTop: true,
                }
            )
            return
        }

        this.form = form
    }

    validate() {
        return this.form.validate()
    }

    value() {
        return this.form.value()
    }

    setValue(value) {
        this.form.setValue(value)
    }

    show() {
        super.show()
        //Need to call unlock on form for proper sizing or
        //growing of text boxes
        this.form.unlock()
    }

    createElement() {
        super.createElement()

        this.element.appendChild(this.form.createElement())

        return this.element;
    }
}
},{"../../controls/form/form":46,"./wizard-page":62}],62:[function(require,module,exports){
const Control = require('../control')

module.exports = class WizardPage extends Control {
    constructor(options) {
        super(options)
    }

    validate() {
        return true
    }

    value() {
        return;
    }

    setValue(value) {

    }

    createElement() {
        super.createElement()

        this.element.classList.add('wizard-page')
        this.element.classList.add('scrolled')
        //this.element.style.display = 'block'

        if (this.options.title) {
            var title = document.createElement('h1')
            title.innerHTML = this.options.title
            this.element.appendChild(title)
        }

        return this.element
    }
}
},{"../control":35}],63:[function(require,module,exports){
//const Control = require("./control");
const Dialog = require('../dialog/dialog');
const Button = require('../button')
const StatusDialog = require('../dialog/status-dialog')

module.exports = class Wizard extends Dialog {
    constructor(options) {
        /* Options
         *  
         */
        options.groupButtons = true;
        super(options);

        this.pages = []

        this.afterSave =

        this._currentPage = 0

        this.btnBack = new Button(
            'Back',
            (event) => {
                this._onBack(event)
            }
        )

        this.btnNext = new Button(
            'Next',
            (event) => {
                this._onNext(event)
            }
        )

        this.btnSave = new Button(
            'Save',
            (event) => {
                this._onSave(event)
            },
            {
                style: 'primary'
            }
        )
    }

    value() {
        var result = {}
        this.pages.forEach((page) => {
            var page_value = page.value()
            if (page_value) {
                result = Object.assign(result,page_value)
            }
        })
        return result
    }

    show(afterSave, onCancel) {
        this.afterSave = afterSave
        super.show(onCancel);
    }

    _onNext() {
        var currentPage = this.getCurrentPage()

        if (!currentPage.validate()) {
            console.log("Invalid input")
            var statusDialog = new StatusDialog()
            statusDialog.show(
                'Invalid Fields',
                'Some fields contain invalid values'
            )
            return false
        }

        console.log(currentPage.value())

        this.gotoNextPage()
    }

    _onBack() {
        this.gotoPreviousPage()
    }

    _onSave() {
        /*
        var currentPage = this.getCurrentPage()

        if (!currentPage.validate()) {
            console.log("Invalid input")
            return false
        }

        console.log(currentPage.value())*/

        this.onSave(this.value())
    }

    onSave(data) {
        console.log(data)
        this.afterSave(data)
    }

    addPage(page) {
        this.pages.push(page);
    }

    gotoPage(page) {
        for (var i = 0; i < this.pages.length; i++) {
            this.pages[i].hide()
        }

        this._currentPage = page
        this.pages[this._currentPage].show(this)

        if (this._currentPage == 0) {
            this.btnBack.lock()
        } else {
            this.btnBack.unlock()
        }

        if (this._currentPage == this.pages.length - 1) {
            this.btnNext.lock()
            this.btnSave.unlock()
        } else {
            this.btnNext.unlock()
            this.btnSave.lock()
        }
    }

    gotoNextPage() {
        if (this._currentPage >= this.pages.length - 1) {
            return 
        }

        this.gotoPage(this._currentPage + 1)
    }

    gotoPreviousPage() {
        if (this._currentPage < 1) {
            return 
        }

        this.gotoPage(this._currentPage - 1)
    }

    getCurrentPage() {
        return this.pages[this._currentPage]
    }

    createElement() {
        super.createElement()

        this._dialogElement.classList.add("wizard")
        

        this.pages.forEach((page) => {
            this.bodyElement.appendChild(page.createElement());
        })

        var btns = [
            this.btnBack,
            this.btnNext,
            this.btnSave
        ]
        
        btns.forEach((button) => {
            this.footerElement.appendChild(button.createElement())
        })

        this.gotoPage(0)

        return this.element
    }
}
},{"../button":34,"../dialog/dialog":38,"../dialog/status-dialog":40}],64:[function(require,module,exports){
const Logger = require("./app/logger");
const Connection = require("./app/connection");
const LoginDialog = require("./app/dialog/login-dialog");
const PatientBrowser = require('./app/panel/patient-browser');
const Icd10CoderDialog = require('./app/dialog/icd10coder-dialog');
const MainPanel = require('./app/panel/main-panel');
const AdmissionWizard = require('./app/wizard/admission-wizard')
const UserDialog = require('./app/dialog/user-dialog')

const DATEFORMAT = 'D MMM YYYY';

logger = new Logger();
connection = new Connection(logger);

dlgLogin = new LoginDialog();
dlgUser = new UserDialog();
icd10Coder = new Icd10CoderDialog();
admitWizard = new AdmissionWizard(
    {
        title: 'New Admission'
    }
);

tryLogin = () =>{    
    //dlgLogin.form.setValue({
        //index_url: '/api/',
        //username: 'admin',
        //password: 'a'
    //})

    dlgLogin.tryLogin(
        () => {
            console.log("Login Sucessful.");
            showMainWindow();
        },
        () => {
            console.log("Cancelled.")
        }
    );
}

logout = () => {
    document.body.innerHTML = "";
    connection.logout(
        () => {
            tryLogin();
        },
        () => {
            console.log("Logout Failed");
            tryLogin();
        }
    )
}

mainPanel = new MainPanel(
    () => {
        dlgUser.show(
            (data) => {
                connection.user.password = data.password
            },
            () => {
                console.log("Cancelled")
            }
        )
    },
    () => {
        logout();
    }
);
pnlPatientBrowser = new PatientBrowser();
dlgIcd10 = new Icd10CoderDialog();


showMainWindow = () => {
    document.body.appendChild(mainPanel.createElement());
}


tryLogin();




//document.body.appendChild(pnlPatientBrowser.createElement());
    /*
    document.body.appendChild(dlgIcd10.createElement());
    dlgIcd10.show(
        (value) => {
            console.log(value);
        },
        () => {
            console.log("Cancelled");
        }
    )
    */

/*
const Icd10CoderDialog = require('./app/dialog/icd10coder-dialog');



document.body.appendChild(icd10.createElement());

icd10.show(
    (value) => {
        console.log(value);
    },
    () => {
        console.log("Cancelled");
    }
);*/


/*
const ListBox =  require('./controls/list-box');
const TextBox = require('./controls/text-box');

var lst = new ListBox(
    (item) => {
        return item.id;
    },
    (item) => {
        return item.label;
    },
    (item) => {
        console.log(item);
    },
    {
        height: '100px'
    }
);

document.body.appendChild(lst.createElement());
var data = []
for (var i = 0; i < 100; i++) {
    data.push({
        id: i,
        label: i
    })
}
lst.setData(data);

txt = new TextBox();
document.body.appendChild(txt.createElement());
txt.element.addEventListener('keyup', (evt) => {
    lst.setSelection(txt.value());
    console.log(txt.value());
})


const RadioListBox = require('./controls/radio-list-box');

var radlst = new RadioListBox(
    (item) => {
        return item.id;
    },
    (item) => {
        return item.label;
    },
    (item) => {
        console.log(item);
    },
    {
        height: '100px'
    }
);

document.body.appendChild(radlst.createElement());
var data = []
for (var i = 0; i < 100; i++) {
    data.push({
        id: i,
        label: 'LBL' + i
    })
}
radlst.setData(data);

radtxt = new TextBox();
document.body.appendChild(radtxt.createElement());
radtxt.element.addEventListener('keyup', (evt) => {
    radlst.setSelection(radtxt.value());
    console.log(txt.value());
})


//Select *********************************
const Select = require('./controls/select');

sel = new Select(
    (item) => {
        return item.id;
    },
    (item) => {
        return item.label;
    },
    {
        placeholder: 'Modifier'
    }
);

document.body.appendChild(sel.createElement());

sel.setData(data);


const Button = require('./controls/button');

btn = new Button(
    'Select Value',
    (ev) => {
        console.log(sel.value());
    }
)

document.body.appendChild(btn.createElement());


btn = new Button(
    'Set',
    (ev) => {
        sel.setSelection(20);
    }
)
document.body.appendChild(btn.createElement());


//Select Field ************************************

const SelectField = require('./controls/form/select-field');

selF = new SelectField(
    'number',
    (item) => {
        return item.id;
    },
    (item) => {
        return item.label;
    },
    {
        placeholder: 'Modifier',
        label: 'Modifier'
    }
)

document.body.appendChild(selF.createElement());

selF.setData(data);

btn = new Button(
    'Lock',
    (ev) => {
        selF.lock();
    }
)
document.body.appendChild(btn.createElement());

btn = new Button(
    'unlock',
    (ev) => {
        selF.unlock();
    }
)
document.body.appendChild(btn.createElement());

btn = new Button(
    'Set',
    (ev) => {
        selF.setValue(data[10]);
    }
)
document.body.appendChild(btn.createElement());

btn = new Button(
    'Get',
    (ev) => {
        console.log(selF.value());
    }
)
document.body.appendChild(btn.createElement());
*/


//Splitter Windo
/*
const Control = require('./controls/control');
const Splitter = require('./controls/splitter');
const ListBox = require('./controls/list-box');

p01 = new ListBox();
p02 = new ListBox();

p1 = new ListBox(
    (item) => {
        return item.id;
    },
    (item) => {
        return item.label;
    },
    (item) => {
        console.log(item);
    },
);
p2 = new Splitter(p01, p02, {
    pane2Size: '200px',
    direction: 'column',
    resizable: true
})

//p2 = new Control();

spl = new Splitter(p1, p2, {
    pane2Size: '250px',
    //direction: 'column'
    resizable: true
});

document.body.appendChild(spl.createElement());


var data = []
for (var i = 0; i < 100; i++) {
    data.push({
        id: i,
        label: 'LBL' + i
    })
}
p1.setData(data);
p1.element.style.border = 'none';
p1.element.style.borderRadius = '0';

//p2.element.innerHTML = "LoL";
*/


/*
const PatientBrowser = require('./app/panel/patient-browser');

b = new PatientBrowser();

document.body.appendChild(b.createElement());
*/
},{"./app/connection":5,"./app/dialog/icd10coder-dialog":6,"./app/dialog/login-dialog":7,"./app/dialog/user-dialog":8,"./app/logger":24,"./app/panel/main-panel":28,"./app/panel/patient-browser":29,"./app/wizard/admission-wizard":33}],65:[function(require,module,exports){
(function (global){
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],66:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],67:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],68:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":66,"./encode":67}],69:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var punycode = require('punycode');
var util = require('./util');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

},{"./util":70,"punycode":65,"querystring":68}],70:[function(require,module,exports){
'use strict';

module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

},{}]},{},[64])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
